Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    LBRACE
    NEW
    RBRACE
    SEMICOLON
    TYPE

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statement NEWLINE statements
Rule 3     statements -> statement statements
Rule 4     statements -> statement
Rule 5     statements -> empty
Rule 6     empty -> <empty>
Rule 7     statement -> print_stmt
Rule 8     statement -> assignment_stmt
Rule 9     statement -> input_stmt
Rule 10    statement -> if_stmt
Rule 11    statement -> while_stmt
Rule 12    statement -> for_stmt
Rule 13    statement -> list_stmt
Rule 14    statement -> function_def
Rule 15    statement -> function_call
Rule 16    statement -> return_stmt
Rule 17    statement -> break_stmt
Rule 18    statement -> expression
Rule 19    function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
Rule 20    function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements
Rule 21    parameter_list -> ID
Rule 22    parameter_list -> ID COMMA parameter_list
Rule 23    function_call -> ID LPAREN argument_list RPAREN
Rule 24    function_call -> ID LPAREN RPAREN
Rule 25    argument_list -> expression
Rule 26    argument_list -> expression COMMA argument_list
Rule 27    return_stmt -> RETURN expression
Rule 28    return_stmt -> RETURN
Rule 29    print_stmt -> PRINT LPAREN print_arguments RPAREN
Rule 30    print_arguments -> expression
Rule 31    print_arguments -> expression COMMA print_arguments
Rule 32    assignment_stmt -> ID EQUALS expression
Rule 33    input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN
Rule 34    input_stmt -> input_multiple
Rule 35    input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN
Rule 36    id_list -> ID COMMA ID
Rule 37    id_list -> ID COMMA id_list
Rule 38    list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET
Rule 39    list_stmt -> ID EQUALS LBRACKET RBRACKET
Rule 40    list_elements -> expression
Rule 41    list_elements -> expression COMMA list_elements
Rule 42    expression -> ID LBRACKET expression RBRACKET
Rule 43    expression -> ID DOT APPEND LPAREN expression RPAREN
Rule 44    break_stmt -> BREAK
Rule 45    if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt
Rule 46    if_stmt -> IF expression COLON statements elif_stmt else_stmt
Rule 47    elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt
Rule 48    elif_stmt -> ELIF expression COLON statements elif_stmt
Rule 49    elif_stmt -> empty
Rule 50    else_stmt -> ELSE COLON NEWLINE statements
Rule 51    else_stmt -> ELSE COLON statements
Rule 52    else_stmt -> empty
Rule 53    while_stmt -> WHILE expression COLON NEWLINE statements
Rule 54    for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
Rule 55    expression -> expression PLUS expression
Rule 56    expression -> expression MINUS expression
Rule 57    expression -> expression TIMES expression
Rule 58    expression -> expression DIVIDE expression
Rule 59    expression -> expression POWER expression
Rule 60    expression -> expression AND expression
Rule 61    expression -> expression OR expression
Rule 62    expression -> expression EQUAL_EQUAL expression
Rule 63    expression -> expression NOT_EQUAL expression
Rule 64    expression -> expression GREATER expression
Rule 65    expression -> expression GREATER_EQUAL expression
Rule 66    expression -> expression LESS expression
Rule 67    expression -> expression LESS_EQUAL expression
Rule 68    expression -> MINUS expression
Rule 69    expression -> NOT expression
Rule 70    expression -> LPAREN expression RPAREN
Rule 71    expression -> NUMBER
Rule 72    expression -> FLOAT
Rule 73    expression -> INT
Rule 74    expression -> STRING
Rule 75    expression -> TRUE
Rule 76    expression -> FALSE
Rule 77    expression -> ID

Terminals, with rules where they appear

AND                  : 60
APPEND               : 43
BREAK                : 44
COLON                : 19 20 45 46 47 48 50 51 53 54
COMMA                : 22 26 31 36 37 41 54
COMMENT              : 
DEF                  : 19 20
DIVIDE               : 58
DOT                  : 43
ELIF                 : 47 48
ELSE                 : 50 51
EQUALS               : 32 33 35 38 39
EQUAL_EQUAL          : 62
FALSE                : 76
FLOAT                : 72
FOR                  : 54
GREATER              : 64
GREATER_EQUAL        : 65
ID                   : 19 20 21 22 23 24 32 33 36 36 37 38 39 42 43 54 77
IF                   : 45 46
IN                   : 54
INPUT                : 33 35
INT                  : 73
LBRACE               : 
LBRACKET             : 38 39 42
LESS                 : 66
LESS_EQUAL           : 67
LPAREN               : 19 20 23 24 29 33 35 43 54 70
MINUS                : 56 68
NEW                  : 
NEWLINE              : 2 19 20 45 47 50 53 54
NOT                  : 69
NOT_EQUAL            : 63
NUMBER               : 71
OR                   : 61
PLUS                 : 55
POWER                : 59
PRINT                : 29
RANGE                : 54
RBRACE               : 
RBRACKET             : 38 39 42
RETURN               : 27 28
RPAREN               : 19 20 23 24 29 33 35 43 54 70
SEMICOLON            : 
STRING               : 33 35 74
TIMES                : 57
TRUE                 : 75
TYPE                 : 
WHILE                : 53
error                : 

Nonterminals, with rules where they appear

argument_list        : 23 26
assignment_stmt      : 8
break_stmt           : 17
elif_stmt            : 45 46 47 48
else_stmt            : 45 46
empty                : 5 49 52
expression           : 18 25 26 27 30 31 32 40 41 42 43 45 46 47 48 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 65 66 66 67 67 68 69 70
for_stmt             : 12
function_call        : 15
function_def         : 14
id_list              : 35 37
if_stmt              : 10
input_multiple       : 34
input_stmt           : 9
list_elements        : 38 41
list_stmt            : 13
parameter_list       : 19 22
print_arguments      : 29 31
print_stmt           : 7
program              : 0
return_stmt          : 16
statement            : 2 3 4
statements           : 1 2 3 19 20 45 46 47 48 50 51 53 54
while_stmt           : 11

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

    $end            reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    expression                     shift and go to state 16
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .

    $end            reduce using rule 1 (program -> statements .)


state 3

    (2) statements -> statement . NEWLINE statements
    (3) statements -> statement . statements
    (4) statements -> statement .
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! reduce/reduce conflict for $end resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for ELIF resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for ELSE resolved using rule 4 (statements -> statement .)
  ! shift/reduce conflict for NEWLINE resolved as shift
  ! reduce/reduce conflict for PRINT resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for ID resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for IF resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for WHILE resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for FOR resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for DEF resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for RETURN resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for BREAK resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for MINUS resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for NOT resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for LPAREN resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for NUMBER resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for FLOAT resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for INT resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for STRING resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for TRUE resolved using rule 4 (statements -> statement .)
  ! reduce/reduce conflict for FALSE resolved using rule 4 (statements -> statement .)
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    NEWLINE         shift and go to state 36
    $end            reduce using rule 4 (statements -> statement .)
    ELIF            reduce using rule 4 (statements -> statement .)
    ELSE            reduce using rule 4 (statements -> statement .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! NEWLINE         [ reduce using rule 4 (statements -> statement .) ]
  ! PRINT           [ reduce using rule 4 (statements -> statement .) ]
  ! ID              [ reduce using rule 4 (statements -> statement .) ]
  ! IF              [ reduce using rule 4 (statements -> statement .) ]
  ! WHILE           [ reduce using rule 4 (statements -> statement .) ]
  ! FOR             [ reduce using rule 4 (statements -> statement .) ]
  ! DEF             [ reduce using rule 4 (statements -> statement .) ]
  ! RETURN          [ reduce using rule 4 (statements -> statement .) ]
  ! BREAK           [ reduce using rule 4 (statements -> statement .) ]
  ! MINUS           [ reduce using rule 4 (statements -> statement .) ]
  ! NOT             [ reduce using rule 4 (statements -> statement .) ]
  ! LPAREN          [ reduce using rule 4 (statements -> statement .) ]
  ! NUMBER          [ reduce using rule 4 (statements -> statement .) ]
  ! FLOAT           [ reduce using rule 4 (statements -> statement .) ]
  ! INT             [ reduce using rule 4 (statements -> statement .) ]
  ! STRING          [ reduce using rule 4 (statements -> statement .) ]
  ! TRUE            [ reduce using rule 4 (statements -> statement .) ]
  ! FALSE           [ reduce using rule 4 (statements -> statement .) ]
  ! $end            [ reduce using rule 6 (empty -> .) ]
  ! ELIF            [ reduce using rule 6 (empty -> .) ]
  ! ELSE            [ reduce using rule 6 (empty -> .) ]
  ! NEWLINE         [ reduce using rule 6 (empty -> .) ]
  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    statement                      shift and go to state 3
    statements                     shift and go to state 37
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    expression                     shift and go to state 16
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 4

    (5) statements -> empty .

    $end            reduce using rule 5 (statements -> empty .)
    ELIF            reduce using rule 5 (statements -> empty .)
    ELSE            reduce using rule 5 (statements -> empty .)
    NEWLINE         reduce using rule 5 (statements -> empty .)
    PRINT           reduce using rule 5 (statements -> empty .)
    ID              reduce using rule 5 (statements -> empty .)
    IF              reduce using rule 5 (statements -> empty .)
    WHILE           reduce using rule 5 (statements -> empty .)
    FOR             reduce using rule 5 (statements -> empty .)
    DEF             reduce using rule 5 (statements -> empty .)
    RETURN          reduce using rule 5 (statements -> empty .)
    BREAK           reduce using rule 5 (statements -> empty .)
    MINUS           reduce using rule 5 (statements -> empty .)
    NOT             reduce using rule 5 (statements -> empty .)
    LPAREN          reduce using rule 5 (statements -> empty .)
    NUMBER          reduce using rule 5 (statements -> empty .)
    FLOAT           reduce using rule 5 (statements -> empty .)
    INT             reduce using rule 5 (statements -> empty .)
    STRING          reduce using rule 5 (statements -> empty .)
    TRUE            reduce using rule 5 (statements -> empty .)
    FALSE           reduce using rule 5 (statements -> empty .)


state 5

    (7) statement -> print_stmt .

    NEWLINE         reduce using rule 7 (statement -> print_stmt .)
    PRINT           reduce using rule 7 (statement -> print_stmt .)
    ID              reduce using rule 7 (statement -> print_stmt .)
    IF              reduce using rule 7 (statement -> print_stmt .)
    WHILE           reduce using rule 7 (statement -> print_stmt .)
    FOR             reduce using rule 7 (statement -> print_stmt .)
    DEF             reduce using rule 7 (statement -> print_stmt .)
    RETURN          reduce using rule 7 (statement -> print_stmt .)
    BREAK           reduce using rule 7 (statement -> print_stmt .)
    MINUS           reduce using rule 7 (statement -> print_stmt .)
    NOT             reduce using rule 7 (statement -> print_stmt .)
    LPAREN          reduce using rule 7 (statement -> print_stmt .)
    NUMBER          reduce using rule 7 (statement -> print_stmt .)
    FLOAT           reduce using rule 7 (statement -> print_stmt .)
    INT             reduce using rule 7 (statement -> print_stmt .)
    STRING          reduce using rule 7 (statement -> print_stmt .)
    TRUE            reduce using rule 7 (statement -> print_stmt .)
    FALSE           reduce using rule 7 (statement -> print_stmt .)
    $end            reduce using rule 7 (statement -> print_stmt .)
    ELIF            reduce using rule 7 (statement -> print_stmt .)
    ELSE            reduce using rule 7 (statement -> print_stmt .)


state 6

    (8) statement -> assignment_stmt .

    NEWLINE         reduce using rule 8 (statement -> assignment_stmt .)
    PRINT           reduce using rule 8 (statement -> assignment_stmt .)
    ID              reduce using rule 8 (statement -> assignment_stmt .)
    IF              reduce using rule 8 (statement -> assignment_stmt .)
    WHILE           reduce using rule 8 (statement -> assignment_stmt .)
    FOR             reduce using rule 8 (statement -> assignment_stmt .)
    DEF             reduce using rule 8 (statement -> assignment_stmt .)
    RETURN          reduce using rule 8 (statement -> assignment_stmt .)
    BREAK           reduce using rule 8 (statement -> assignment_stmt .)
    MINUS           reduce using rule 8 (statement -> assignment_stmt .)
    NOT             reduce using rule 8 (statement -> assignment_stmt .)
    LPAREN          reduce using rule 8 (statement -> assignment_stmt .)
    NUMBER          reduce using rule 8 (statement -> assignment_stmt .)
    FLOAT           reduce using rule 8 (statement -> assignment_stmt .)
    INT             reduce using rule 8 (statement -> assignment_stmt .)
    STRING          reduce using rule 8 (statement -> assignment_stmt .)
    TRUE            reduce using rule 8 (statement -> assignment_stmt .)
    FALSE           reduce using rule 8 (statement -> assignment_stmt .)
    $end            reduce using rule 8 (statement -> assignment_stmt .)
    ELIF            reduce using rule 8 (statement -> assignment_stmt .)
    ELSE            reduce using rule 8 (statement -> assignment_stmt .)


state 7

    (9) statement -> input_stmt .

    NEWLINE         reduce using rule 9 (statement -> input_stmt .)
    PRINT           reduce using rule 9 (statement -> input_stmt .)
    ID              reduce using rule 9 (statement -> input_stmt .)
    IF              reduce using rule 9 (statement -> input_stmt .)
    WHILE           reduce using rule 9 (statement -> input_stmt .)
    FOR             reduce using rule 9 (statement -> input_stmt .)
    DEF             reduce using rule 9 (statement -> input_stmt .)
    RETURN          reduce using rule 9 (statement -> input_stmt .)
    BREAK           reduce using rule 9 (statement -> input_stmt .)
    MINUS           reduce using rule 9 (statement -> input_stmt .)
    NOT             reduce using rule 9 (statement -> input_stmt .)
    LPAREN          reduce using rule 9 (statement -> input_stmt .)
    NUMBER          reduce using rule 9 (statement -> input_stmt .)
    FLOAT           reduce using rule 9 (statement -> input_stmt .)
    INT             reduce using rule 9 (statement -> input_stmt .)
    STRING          reduce using rule 9 (statement -> input_stmt .)
    TRUE            reduce using rule 9 (statement -> input_stmt .)
    FALSE           reduce using rule 9 (statement -> input_stmt .)
    $end            reduce using rule 9 (statement -> input_stmt .)
    ELIF            reduce using rule 9 (statement -> input_stmt .)
    ELSE            reduce using rule 9 (statement -> input_stmt .)


state 8

    (10) statement -> if_stmt .

    NEWLINE         reduce using rule 10 (statement -> if_stmt .)
    PRINT           reduce using rule 10 (statement -> if_stmt .)
    ID              reduce using rule 10 (statement -> if_stmt .)
    IF              reduce using rule 10 (statement -> if_stmt .)
    WHILE           reduce using rule 10 (statement -> if_stmt .)
    FOR             reduce using rule 10 (statement -> if_stmt .)
    DEF             reduce using rule 10 (statement -> if_stmt .)
    RETURN          reduce using rule 10 (statement -> if_stmt .)
    BREAK           reduce using rule 10 (statement -> if_stmt .)
    MINUS           reduce using rule 10 (statement -> if_stmt .)
    NOT             reduce using rule 10 (statement -> if_stmt .)
    LPAREN          reduce using rule 10 (statement -> if_stmt .)
    NUMBER          reduce using rule 10 (statement -> if_stmt .)
    FLOAT           reduce using rule 10 (statement -> if_stmt .)
    INT             reduce using rule 10 (statement -> if_stmt .)
    STRING          reduce using rule 10 (statement -> if_stmt .)
    TRUE            reduce using rule 10 (statement -> if_stmt .)
    FALSE           reduce using rule 10 (statement -> if_stmt .)
    $end            reduce using rule 10 (statement -> if_stmt .)
    ELIF            reduce using rule 10 (statement -> if_stmt .)
    ELSE            reduce using rule 10 (statement -> if_stmt .)


state 9

    (11) statement -> while_stmt .

    NEWLINE         reduce using rule 11 (statement -> while_stmt .)
    PRINT           reduce using rule 11 (statement -> while_stmt .)
    ID              reduce using rule 11 (statement -> while_stmt .)
    IF              reduce using rule 11 (statement -> while_stmt .)
    WHILE           reduce using rule 11 (statement -> while_stmt .)
    FOR             reduce using rule 11 (statement -> while_stmt .)
    DEF             reduce using rule 11 (statement -> while_stmt .)
    RETURN          reduce using rule 11 (statement -> while_stmt .)
    BREAK           reduce using rule 11 (statement -> while_stmt .)
    MINUS           reduce using rule 11 (statement -> while_stmt .)
    NOT             reduce using rule 11 (statement -> while_stmt .)
    LPAREN          reduce using rule 11 (statement -> while_stmt .)
    NUMBER          reduce using rule 11 (statement -> while_stmt .)
    FLOAT           reduce using rule 11 (statement -> while_stmt .)
    INT             reduce using rule 11 (statement -> while_stmt .)
    STRING          reduce using rule 11 (statement -> while_stmt .)
    TRUE            reduce using rule 11 (statement -> while_stmt .)
    FALSE           reduce using rule 11 (statement -> while_stmt .)
    $end            reduce using rule 11 (statement -> while_stmt .)
    ELIF            reduce using rule 11 (statement -> while_stmt .)
    ELSE            reduce using rule 11 (statement -> while_stmt .)


state 10

    (12) statement -> for_stmt .

    NEWLINE         reduce using rule 12 (statement -> for_stmt .)
    PRINT           reduce using rule 12 (statement -> for_stmt .)
    ID              reduce using rule 12 (statement -> for_stmt .)
    IF              reduce using rule 12 (statement -> for_stmt .)
    WHILE           reduce using rule 12 (statement -> for_stmt .)
    FOR             reduce using rule 12 (statement -> for_stmt .)
    DEF             reduce using rule 12 (statement -> for_stmt .)
    RETURN          reduce using rule 12 (statement -> for_stmt .)
    BREAK           reduce using rule 12 (statement -> for_stmt .)
    MINUS           reduce using rule 12 (statement -> for_stmt .)
    NOT             reduce using rule 12 (statement -> for_stmt .)
    LPAREN          reduce using rule 12 (statement -> for_stmt .)
    NUMBER          reduce using rule 12 (statement -> for_stmt .)
    FLOAT           reduce using rule 12 (statement -> for_stmt .)
    INT             reduce using rule 12 (statement -> for_stmt .)
    STRING          reduce using rule 12 (statement -> for_stmt .)
    TRUE            reduce using rule 12 (statement -> for_stmt .)
    FALSE           reduce using rule 12 (statement -> for_stmt .)
    $end            reduce using rule 12 (statement -> for_stmt .)
    ELIF            reduce using rule 12 (statement -> for_stmt .)
    ELSE            reduce using rule 12 (statement -> for_stmt .)


state 11

    (13) statement -> list_stmt .

    NEWLINE         reduce using rule 13 (statement -> list_stmt .)
    PRINT           reduce using rule 13 (statement -> list_stmt .)
    ID              reduce using rule 13 (statement -> list_stmt .)
    IF              reduce using rule 13 (statement -> list_stmt .)
    WHILE           reduce using rule 13 (statement -> list_stmt .)
    FOR             reduce using rule 13 (statement -> list_stmt .)
    DEF             reduce using rule 13 (statement -> list_stmt .)
    RETURN          reduce using rule 13 (statement -> list_stmt .)
    BREAK           reduce using rule 13 (statement -> list_stmt .)
    MINUS           reduce using rule 13 (statement -> list_stmt .)
    NOT             reduce using rule 13 (statement -> list_stmt .)
    LPAREN          reduce using rule 13 (statement -> list_stmt .)
    NUMBER          reduce using rule 13 (statement -> list_stmt .)
    FLOAT           reduce using rule 13 (statement -> list_stmt .)
    INT             reduce using rule 13 (statement -> list_stmt .)
    STRING          reduce using rule 13 (statement -> list_stmt .)
    TRUE            reduce using rule 13 (statement -> list_stmt .)
    FALSE           reduce using rule 13 (statement -> list_stmt .)
    $end            reduce using rule 13 (statement -> list_stmt .)
    ELIF            reduce using rule 13 (statement -> list_stmt .)
    ELSE            reduce using rule 13 (statement -> list_stmt .)


state 12

    (14) statement -> function_def .

    NEWLINE         reduce using rule 14 (statement -> function_def .)
    PRINT           reduce using rule 14 (statement -> function_def .)
    ID              reduce using rule 14 (statement -> function_def .)
    IF              reduce using rule 14 (statement -> function_def .)
    WHILE           reduce using rule 14 (statement -> function_def .)
    FOR             reduce using rule 14 (statement -> function_def .)
    DEF             reduce using rule 14 (statement -> function_def .)
    RETURN          reduce using rule 14 (statement -> function_def .)
    BREAK           reduce using rule 14 (statement -> function_def .)
    MINUS           reduce using rule 14 (statement -> function_def .)
    NOT             reduce using rule 14 (statement -> function_def .)
    LPAREN          reduce using rule 14 (statement -> function_def .)
    NUMBER          reduce using rule 14 (statement -> function_def .)
    FLOAT           reduce using rule 14 (statement -> function_def .)
    INT             reduce using rule 14 (statement -> function_def .)
    STRING          reduce using rule 14 (statement -> function_def .)
    TRUE            reduce using rule 14 (statement -> function_def .)
    FALSE           reduce using rule 14 (statement -> function_def .)
    $end            reduce using rule 14 (statement -> function_def .)
    ELIF            reduce using rule 14 (statement -> function_def .)
    ELSE            reduce using rule 14 (statement -> function_def .)


state 13

    (15) statement -> function_call .

    NEWLINE         reduce using rule 15 (statement -> function_call .)
    PRINT           reduce using rule 15 (statement -> function_call .)
    ID              reduce using rule 15 (statement -> function_call .)
    IF              reduce using rule 15 (statement -> function_call .)
    WHILE           reduce using rule 15 (statement -> function_call .)
    FOR             reduce using rule 15 (statement -> function_call .)
    DEF             reduce using rule 15 (statement -> function_call .)
    RETURN          reduce using rule 15 (statement -> function_call .)
    BREAK           reduce using rule 15 (statement -> function_call .)
    MINUS           reduce using rule 15 (statement -> function_call .)
    NOT             reduce using rule 15 (statement -> function_call .)
    LPAREN          reduce using rule 15 (statement -> function_call .)
    NUMBER          reduce using rule 15 (statement -> function_call .)
    FLOAT           reduce using rule 15 (statement -> function_call .)
    INT             reduce using rule 15 (statement -> function_call .)
    STRING          reduce using rule 15 (statement -> function_call .)
    TRUE            reduce using rule 15 (statement -> function_call .)
    FALSE           reduce using rule 15 (statement -> function_call .)
    $end            reduce using rule 15 (statement -> function_call .)
    ELIF            reduce using rule 15 (statement -> function_call .)
    ELSE            reduce using rule 15 (statement -> function_call .)


state 14

    (16) statement -> return_stmt .

    NEWLINE         reduce using rule 16 (statement -> return_stmt .)
    PRINT           reduce using rule 16 (statement -> return_stmt .)
    ID              reduce using rule 16 (statement -> return_stmt .)
    IF              reduce using rule 16 (statement -> return_stmt .)
    WHILE           reduce using rule 16 (statement -> return_stmt .)
    FOR             reduce using rule 16 (statement -> return_stmt .)
    DEF             reduce using rule 16 (statement -> return_stmt .)
    RETURN          reduce using rule 16 (statement -> return_stmt .)
    BREAK           reduce using rule 16 (statement -> return_stmt .)
    MINUS           reduce using rule 16 (statement -> return_stmt .)
    NOT             reduce using rule 16 (statement -> return_stmt .)
    LPAREN          reduce using rule 16 (statement -> return_stmt .)
    NUMBER          reduce using rule 16 (statement -> return_stmt .)
    FLOAT           reduce using rule 16 (statement -> return_stmt .)
    INT             reduce using rule 16 (statement -> return_stmt .)
    STRING          reduce using rule 16 (statement -> return_stmt .)
    TRUE            reduce using rule 16 (statement -> return_stmt .)
    FALSE           reduce using rule 16 (statement -> return_stmt .)
    $end            reduce using rule 16 (statement -> return_stmt .)
    ELIF            reduce using rule 16 (statement -> return_stmt .)
    ELSE            reduce using rule 16 (statement -> return_stmt .)


state 15

    (17) statement -> break_stmt .

    NEWLINE         reduce using rule 17 (statement -> break_stmt .)
    PRINT           reduce using rule 17 (statement -> break_stmt .)
    ID              reduce using rule 17 (statement -> break_stmt .)
    IF              reduce using rule 17 (statement -> break_stmt .)
    WHILE           reduce using rule 17 (statement -> break_stmt .)
    FOR             reduce using rule 17 (statement -> break_stmt .)
    DEF             reduce using rule 17 (statement -> break_stmt .)
    RETURN          reduce using rule 17 (statement -> break_stmt .)
    BREAK           reduce using rule 17 (statement -> break_stmt .)
    MINUS           reduce using rule 17 (statement -> break_stmt .)
    NOT             reduce using rule 17 (statement -> break_stmt .)
    LPAREN          reduce using rule 17 (statement -> break_stmt .)
    NUMBER          reduce using rule 17 (statement -> break_stmt .)
    FLOAT           reduce using rule 17 (statement -> break_stmt .)
    INT             reduce using rule 17 (statement -> break_stmt .)
    STRING          reduce using rule 17 (statement -> break_stmt .)
    TRUE            reduce using rule 17 (statement -> break_stmt .)
    FALSE           reduce using rule 17 (statement -> break_stmt .)
    $end            reduce using rule 17 (statement -> break_stmt .)
    ELIF            reduce using rule 17 (statement -> break_stmt .)
    ELSE            reduce using rule 17 (statement -> break_stmt .)


state 16

    (18) statement -> expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for MINUS resolved as shift
    NEWLINE         reduce using rule 18 (statement -> expression .)
    PRINT           reduce using rule 18 (statement -> expression .)
    ID              reduce using rule 18 (statement -> expression .)
    IF              reduce using rule 18 (statement -> expression .)
    WHILE           reduce using rule 18 (statement -> expression .)
    FOR             reduce using rule 18 (statement -> expression .)
    DEF             reduce using rule 18 (statement -> expression .)
    RETURN          reduce using rule 18 (statement -> expression .)
    BREAK           reduce using rule 18 (statement -> expression .)
    NOT             reduce using rule 18 (statement -> expression .)
    LPAREN          reduce using rule 18 (statement -> expression .)
    NUMBER          reduce using rule 18 (statement -> expression .)
    FLOAT           reduce using rule 18 (statement -> expression .)
    INT             reduce using rule 18 (statement -> expression .)
    STRING          reduce using rule 18 (statement -> expression .)
    TRUE            reduce using rule 18 (statement -> expression .)
    FALSE           reduce using rule 18 (statement -> expression .)
    $end            reduce using rule 18 (statement -> expression .)
    ELIF            reduce using rule 18 (statement -> expression .)
    ELSE            reduce using rule 18 (statement -> expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! MINUS           [ reduce using rule 18 (statement -> expression .) ]


state 17

    (29) print_stmt -> PRINT . LPAREN print_arguments RPAREN

    LPAREN          shift and go to state 51


state 18

    (70) expression -> LPAREN . expression RPAREN
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 52

state 19

    (32) assignment_stmt -> ID . EQUALS expression
    (33) input_stmt -> ID . EQUALS INPUT LPAREN STRING RPAREN
    (38) list_stmt -> ID . EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> ID . EQUALS LBRACKET RBRACKET
    (23) function_call -> ID . LPAREN argument_list RPAREN
    (24) function_call -> ID . LPAREN RPAREN
    (42) expression -> ID . LBRACKET expression RBRACKET
    (43) expression -> ID . DOT APPEND LPAREN expression RPAREN
    (77) expression -> ID .
    (36) id_list -> ID . COMMA ID
    (37) id_list -> ID . COMMA id_list

  ! shift/reduce conflict for LPAREN resolved as shift
    EQUALS          shift and go to state 54
    LPAREN          shift and go to state 55
    LBRACKET        shift and go to state 56
    DOT             shift and go to state 57
    PLUS            reduce using rule 77 (expression -> ID .)
    MINUS           reduce using rule 77 (expression -> ID .)
    TIMES           reduce using rule 77 (expression -> ID .)
    DIVIDE          reduce using rule 77 (expression -> ID .)
    POWER           reduce using rule 77 (expression -> ID .)
    AND             reduce using rule 77 (expression -> ID .)
    OR              reduce using rule 77 (expression -> ID .)
    EQUAL_EQUAL     reduce using rule 77 (expression -> ID .)
    NOT_EQUAL       reduce using rule 77 (expression -> ID .)
    GREATER         reduce using rule 77 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 77 (expression -> ID .)
    LESS            reduce using rule 77 (expression -> ID .)
    LESS_EQUAL      reduce using rule 77 (expression -> ID .)
    NEWLINE         reduce using rule 77 (expression -> ID .)
    PRINT           reduce using rule 77 (expression -> ID .)
    ID              reduce using rule 77 (expression -> ID .)
    IF              reduce using rule 77 (expression -> ID .)
    WHILE           reduce using rule 77 (expression -> ID .)
    FOR             reduce using rule 77 (expression -> ID .)
    DEF             reduce using rule 77 (expression -> ID .)
    RETURN          reduce using rule 77 (expression -> ID .)
    BREAK           reduce using rule 77 (expression -> ID .)
    NOT             reduce using rule 77 (expression -> ID .)
    NUMBER          reduce using rule 77 (expression -> ID .)
    FLOAT           reduce using rule 77 (expression -> ID .)
    INT             reduce using rule 77 (expression -> ID .)
    STRING          reduce using rule 77 (expression -> ID .)
    TRUE            reduce using rule 77 (expression -> ID .)
    FALSE           reduce using rule 77 (expression -> ID .)
    $end            reduce using rule 77 (expression -> ID .)
    ELIF            reduce using rule 77 (expression -> ID .)
    ELSE            reduce using rule 77 (expression -> ID .)
    COMMA           shift and go to state 58

  ! LPAREN          [ reduce using rule 77 (expression -> ID .) ]


state 20

    (74) expression -> STRING .

    PLUS            reduce using rule 74 (expression -> STRING .)
    MINUS           reduce using rule 74 (expression -> STRING .)
    TIMES           reduce using rule 74 (expression -> STRING .)
    DIVIDE          reduce using rule 74 (expression -> STRING .)
    POWER           reduce using rule 74 (expression -> STRING .)
    AND             reduce using rule 74 (expression -> STRING .)
    OR              reduce using rule 74 (expression -> STRING .)
    EQUAL_EQUAL     reduce using rule 74 (expression -> STRING .)
    NOT_EQUAL       reduce using rule 74 (expression -> STRING .)
    GREATER         reduce using rule 74 (expression -> STRING .)
    GREATER_EQUAL   reduce using rule 74 (expression -> STRING .)
    LESS            reduce using rule 74 (expression -> STRING .)
    LESS_EQUAL      reduce using rule 74 (expression -> STRING .)
    NEWLINE         reduce using rule 74 (expression -> STRING .)
    PRINT           reduce using rule 74 (expression -> STRING .)
    ID              reduce using rule 74 (expression -> STRING .)
    IF              reduce using rule 74 (expression -> STRING .)
    WHILE           reduce using rule 74 (expression -> STRING .)
    FOR             reduce using rule 74 (expression -> STRING .)
    DEF             reduce using rule 74 (expression -> STRING .)
    RETURN          reduce using rule 74 (expression -> STRING .)
    BREAK           reduce using rule 74 (expression -> STRING .)
    NOT             reduce using rule 74 (expression -> STRING .)
    LPAREN          reduce using rule 74 (expression -> STRING .)
    NUMBER          reduce using rule 74 (expression -> STRING .)
    FLOAT           reduce using rule 74 (expression -> STRING .)
    INT             reduce using rule 74 (expression -> STRING .)
    STRING          reduce using rule 74 (expression -> STRING .)
    TRUE            reduce using rule 74 (expression -> STRING .)
    FALSE           reduce using rule 74 (expression -> STRING .)
    $end            reduce using rule 74 (expression -> STRING .)
    ELIF            reduce using rule 74 (expression -> STRING .)
    ELSE            reduce using rule 74 (expression -> STRING .)
    RPAREN          reduce using rule 74 (expression -> STRING .)
    COLON           reduce using rule 74 (expression -> STRING .)
    COMMA           reduce using rule 74 (expression -> STRING .)
    RBRACKET        reduce using rule 74 (expression -> STRING .)


state 21

    (34) input_stmt -> input_multiple .

    NEWLINE         reduce using rule 34 (input_stmt -> input_multiple .)
    PRINT           reduce using rule 34 (input_stmt -> input_multiple .)
    ID              reduce using rule 34 (input_stmt -> input_multiple .)
    IF              reduce using rule 34 (input_stmt -> input_multiple .)
    WHILE           reduce using rule 34 (input_stmt -> input_multiple .)
    FOR             reduce using rule 34 (input_stmt -> input_multiple .)
    DEF             reduce using rule 34 (input_stmt -> input_multiple .)
    RETURN          reduce using rule 34 (input_stmt -> input_multiple .)
    BREAK           reduce using rule 34 (input_stmt -> input_multiple .)
    MINUS           reduce using rule 34 (input_stmt -> input_multiple .)
    NOT             reduce using rule 34 (input_stmt -> input_multiple .)
    LPAREN          reduce using rule 34 (input_stmt -> input_multiple .)
    NUMBER          reduce using rule 34 (input_stmt -> input_multiple .)
    FLOAT           reduce using rule 34 (input_stmt -> input_multiple .)
    INT             reduce using rule 34 (input_stmt -> input_multiple .)
    STRING          reduce using rule 34 (input_stmt -> input_multiple .)
    TRUE            reduce using rule 34 (input_stmt -> input_multiple .)
    FALSE           reduce using rule 34 (input_stmt -> input_multiple .)
    $end            reduce using rule 34 (input_stmt -> input_multiple .)
    ELIF            reduce using rule 34 (input_stmt -> input_multiple .)
    ELSE            reduce using rule 34 (input_stmt -> input_multiple .)


state 22

    (45) if_stmt -> IF . expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> IF . expression COLON statements elif_stmt else_stmt
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 59

state 23

    (53) while_stmt -> WHILE . expression COLON NEWLINE statements
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 60

state 24

    (54) for_stmt -> FOR . ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements

    ID              shift and go to state 61


state 25

    (19) function_def -> DEF . ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> DEF . ID LPAREN RPAREN COLON NEWLINE statements

    ID              shift and go to state 62


state 26

    (27) return_stmt -> RETURN . expression
    (28) return_stmt -> RETURN .
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    NEWLINE         reduce using rule 28 (return_stmt -> RETURN .)
    PRINT           reduce using rule 28 (return_stmt -> RETURN .)
    IF              reduce using rule 28 (return_stmt -> RETURN .)
    WHILE           reduce using rule 28 (return_stmt -> RETURN .)
    FOR             reduce using rule 28 (return_stmt -> RETURN .)
    DEF             reduce using rule 28 (return_stmt -> RETURN .)
    RETURN          reduce using rule 28 (return_stmt -> RETURN .)
    BREAK           reduce using rule 28 (return_stmt -> RETURN .)
    $end            reduce using rule 28 (return_stmt -> RETURN .)
    ELIF            reduce using rule 28 (return_stmt -> RETURN .)
    ELSE            reduce using rule 28 (return_stmt -> RETURN .)
    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! ID              [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! MINUS           [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! NOT             [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! LPAREN          [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! NUMBER          [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! FLOAT           [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! INT             [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! STRING          [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! TRUE            [ reduce using rule 28 (return_stmt -> RETURN .) ]
  ! FALSE           [ reduce using rule 28 (return_stmt -> RETURN .) ]

    expression                     shift and go to state 63

state 27

    (44) break_stmt -> BREAK .

    NEWLINE         reduce using rule 44 (break_stmt -> BREAK .)
    PRINT           reduce using rule 44 (break_stmt -> BREAK .)
    ID              reduce using rule 44 (break_stmt -> BREAK .)
    IF              reduce using rule 44 (break_stmt -> BREAK .)
    WHILE           reduce using rule 44 (break_stmt -> BREAK .)
    FOR             reduce using rule 44 (break_stmt -> BREAK .)
    DEF             reduce using rule 44 (break_stmt -> BREAK .)
    RETURN          reduce using rule 44 (break_stmt -> BREAK .)
    BREAK           reduce using rule 44 (break_stmt -> BREAK .)
    MINUS           reduce using rule 44 (break_stmt -> BREAK .)
    NOT             reduce using rule 44 (break_stmt -> BREAK .)
    LPAREN          reduce using rule 44 (break_stmt -> BREAK .)
    NUMBER          reduce using rule 44 (break_stmt -> BREAK .)
    FLOAT           reduce using rule 44 (break_stmt -> BREAK .)
    INT             reduce using rule 44 (break_stmt -> BREAK .)
    STRING          reduce using rule 44 (break_stmt -> BREAK .)
    TRUE            reduce using rule 44 (break_stmt -> BREAK .)
    FALSE           reduce using rule 44 (break_stmt -> BREAK .)
    $end            reduce using rule 44 (break_stmt -> BREAK .)
    ELIF            reduce using rule 44 (break_stmt -> BREAK .)
    ELSE            reduce using rule 44 (break_stmt -> BREAK .)


state 28

    (68) expression -> MINUS . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 64

state 29

    (69) expression -> NOT . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 65

state 30

    (71) expression -> NUMBER .

    PLUS            reduce using rule 71 (expression -> NUMBER .)
    MINUS           reduce using rule 71 (expression -> NUMBER .)
    TIMES           reduce using rule 71 (expression -> NUMBER .)
    DIVIDE          reduce using rule 71 (expression -> NUMBER .)
    POWER           reduce using rule 71 (expression -> NUMBER .)
    AND             reduce using rule 71 (expression -> NUMBER .)
    OR              reduce using rule 71 (expression -> NUMBER .)
    EQUAL_EQUAL     reduce using rule 71 (expression -> NUMBER .)
    NOT_EQUAL       reduce using rule 71 (expression -> NUMBER .)
    GREATER         reduce using rule 71 (expression -> NUMBER .)
    GREATER_EQUAL   reduce using rule 71 (expression -> NUMBER .)
    LESS            reduce using rule 71 (expression -> NUMBER .)
    LESS_EQUAL      reduce using rule 71 (expression -> NUMBER .)
    NEWLINE         reduce using rule 71 (expression -> NUMBER .)
    PRINT           reduce using rule 71 (expression -> NUMBER .)
    ID              reduce using rule 71 (expression -> NUMBER .)
    IF              reduce using rule 71 (expression -> NUMBER .)
    WHILE           reduce using rule 71 (expression -> NUMBER .)
    FOR             reduce using rule 71 (expression -> NUMBER .)
    DEF             reduce using rule 71 (expression -> NUMBER .)
    RETURN          reduce using rule 71 (expression -> NUMBER .)
    BREAK           reduce using rule 71 (expression -> NUMBER .)
    NOT             reduce using rule 71 (expression -> NUMBER .)
    LPAREN          reduce using rule 71 (expression -> NUMBER .)
    NUMBER          reduce using rule 71 (expression -> NUMBER .)
    FLOAT           reduce using rule 71 (expression -> NUMBER .)
    INT             reduce using rule 71 (expression -> NUMBER .)
    STRING          reduce using rule 71 (expression -> NUMBER .)
    TRUE            reduce using rule 71 (expression -> NUMBER .)
    FALSE           reduce using rule 71 (expression -> NUMBER .)
    $end            reduce using rule 71 (expression -> NUMBER .)
    ELIF            reduce using rule 71 (expression -> NUMBER .)
    ELSE            reduce using rule 71 (expression -> NUMBER .)
    RPAREN          reduce using rule 71 (expression -> NUMBER .)
    COLON           reduce using rule 71 (expression -> NUMBER .)
    COMMA           reduce using rule 71 (expression -> NUMBER .)
    RBRACKET        reduce using rule 71 (expression -> NUMBER .)


state 31

    (72) expression -> FLOAT .

    PLUS            reduce using rule 72 (expression -> FLOAT .)
    MINUS           reduce using rule 72 (expression -> FLOAT .)
    TIMES           reduce using rule 72 (expression -> FLOAT .)
    DIVIDE          reduce using rule 72 (expression -> FLOAT .)
    POWER           reduce using rule 72 (expression -> FLOAT .)
    AND             reduce using rule 72 (expression -> FLOAT .)
    OR              reduce using rule 72 (expression -> FLOAT .)
    EQUAL_EQUAL     reduce using rule 72 (expression -> FLOAT .)
    NOT_EQUAL       reduce using rule 72 (expression -> FLOAT .)
    GREATER         reduce using rule 72 (expression -> FLOAT .)
    GREATER_EQUAL   reduce using rule 72 (expression -> FLOAT .)
    LESS            reduce using rule 72 (expression -> FLOAT .)
    LESS_EQUAL      reduce using rule 72 (expression -> FLOAT .)
    NEWLINE         reduce using rule 72 (expression -> FLOAT .)
    PRINT           reduce using rule 72 (expression -> FLOAT .)
    ID              reduce using rule 72 (expression -> FLOAT .)
    IF              reduce using rule 72 (expression -> FLOAT .)
    WHILE           reduce using rule 72 (expression -> FLOAT .)
    FOR             reduce using rule 72 (expression -> FLOAT .)
    DEF             reduce using rule 72 (expression -> FLOAT .)
    RETURN          reduce using rule 72 (expression -> FLOAT .)
    BREAK           reduce using rule 72 (expression -> FLOAT .)
    NOT             reduce using rule 72 (expression -> FLOAT .)
    LPAREN          reduce using rule 72 (expression -> FLOAT .)
    NUMBER          reduce using rule 72 (expression -> FLOAT .)
    FLOAT           reduce using rule 72 (expression -> FLOAT .)
    INT             reduce using rule 72 (expression -> FLOAT .)
    STRING          reduce using rule 72 (expression -> FLOAT .)
    TRUE            reduce using rule 72 (expression -> FLOAT .)
    FALSE           reduce using rule 72 (expression -> FLOAT .)
    $end            reduce using rule 72 (expression -> FLOAT .)
    ELIF            reduce using rule 72 (expression -> FLOAT .)
    ELSE            reduce using rule 72 (expression -> FLOAT .)
    RPAREN          reduce using rule 72 (expression -> FLOAT .)
    COLON           reduce using rule 72 (expression -> FLOAT .)
    COMMA           reduce using rule 72 (expression -> FLOAT .)
    RBRACKET        reduce using rule 72 (expression -> FLOAT .)


state 32

    (73) expression -> INT .

    PLUS            reduce using rule 73 (expression -> INT .)
    MINUS           reduce using rule 73 (expression -> INT .)
    TIMES           reduce using rule 73 (expression -> INT .)
    DIVIDE          reduce using rule 73 (expression -> INT .)
    POWER           reduce using rule 73 (expression -> INT .)
    AND             reduce using rule 73 (expression -> INT .)
    OR              reduce using rule 73 (expression -> INT .)
    EQUAL_EQUAL     reduce using rule 73 (expression -> INT .)
    NOT_EQUAL       reduce using rule 73 (expression -> INT .)
    GREATER         reduce using rule 73 (expression -> INT .)
    GREATER_EQUAL   reduce using rule 73 (expression -> INT .)
    LESS            reduce using rule 73 (expression -> INT .)
    LESS_EQUAL      reduce using rule 73 (expression -> INT .)
    NEWLINE         reduce using rule 73 (expression -> INT .)
    PRINT           reduce using rule 73 (expression -> INT .)
    ID              reduce using rule 73 (expression -> INT .)
    IF              reduce using rule 73 (expression -> INT .)
    WHILE           reduce using rule 73 (expression -> INT .)
    FOR             reduce using rule 73 (expression -> INT .)
    DEF             reduce using rule 73 (expression -> INT .)
    RETURN          reduce using rule 73 (expression -> INT .)
    BREAK           reduce using rule 73 (expression -> INT .)
    NOT             reduce using rule 73 (expression -> INT .)
    LPAREN          reduce using rule 73 (expression -> INT .)
    NUMBER          reduce using rule 73 (expression -> INT .)
    FLOAT           reduce using rule 73 (expression -> INT .)
    INT             reduce using rule 73 (expression -> INT .)
    STRING          reduce using rule 73 (expression -> INT .)
    TRUE            reduce using rule 73 (expression -> INT .)
    FALSE           reduce using rule 73 (expression -> INT .)
    $end            reduce using rule 73 (expression -> INT .)
    ELIF            reduce using rule 73 (expression -> INT .)
    ELSE            reduce using rule 73 (expression -> INT .)
    RPAREN          reduce using rule 73 (expression -> INT .)
    COLON           reduce using rule 73 (expression -> INT .)
    COMMA           reduce using rule 73 (expression -> INT .)
    RBRACKET        reduce using rule 73 (expression -> INT .)


state 33

    (75) expression -> TRUE .

    PLUS            reduce using rule 75 (expression -> TRUE .)
    MINUS           reduce using rule 75 (expression -> TRUE .)
    TIMES           reduce using rule 75 (expression -> TRUE .)
    DIVIDE          reduce using rule 75 (expression -> TRUE .)
    POWER           reduce using rule 75 (expression -> TRUE .)
    AND             reduce using rule 75 (expression -> TRUE .)
    OR              reduce using rule 75 (expression -> TRUE .)
    EQUAL_EQUAL     reduce using rule 75 (expression -> TRUE .)
    NOT_EQUAL       reduce using rule 75 (expression -> TRUE .)
    GREATER         reduce using rule 75 (expression -> TRUE .)
    GREATER_EQUAL   reduce using rule 75 (expression -> TRUE .)
    LESS            reduce using rule 75 (expression -> TRUE .)
    LESS_EQUAL      reduce using rule 75 (expression -> TRUE .)
    NEWLINE         reduce using rule 75 (expression -> TRUE .)
    PRINT           reduce using rule 75 (expression -> TRUE .)
    ID              reduce using rule 75 (expression -> TRUE .)
    IF              reduce using rule 75 (expression -> TRUE .)
    WHILE           reduce using rule 75 (expression -> TRUE .)
    FOR             reduce using rule 75 (expression -> TRUE .)
    DEF             reduce using rule 75 (expression -> TRUE .)
    RETURN          reduce using rule 75 (expression -> TRUE .)
    BREAK           reduce using rule 75 (expression -> TRUE .)
    NOT             reduce using rule 75 (expression -> TRUE .)
    LPAREN          reduce using rule 75 (expression -> TRUE .)
    NUMBER          reduce using rule 75 (expression -> TRUE .)
    FLOAT           reduce using rule 75 (expression -> TRUE .)
    INT             reduce using rule 75 (expression -> TRUE .)
    STRING          reduce using rule 75 (expression -> TRUE .)
    TRUE            reduce using rule 75 (expression -> TRUE .)
    FALSE           reduce using rule 75 (expression -> TRUE .)
    $end            reduce using rule 75 (expression -> TRUE .)
    ELIF            reduce using rule 75 (expression -> TRUE .)
    ELSE            reduce using rule 75 (expression -> TRUE .)
    RPAREN          reduce using rule 75 (expression -> TRUE .)
    COLON           reduce using rule 75 (expression -> TRUE .)
    COMMA           reduce using rule 75 (expression -> TRUE .)
    RBRACKET        reduce using rule 75 (expression -> TRUE .)


state 34

    (76) expression -> FALSE .

    PLUS            reduce using rule 76 (expression -> FALSE .)
    MINUS           reduce using rule 76 (expression -> FALSE .)
    TIMES           reduce using rule 76 (expression -> FALSE .)
    DIVIDE          reduce using rule 76 (expression -> FALSE .)
    POWER           reduce using rule 76 (expression -> FALSE .)
    AND             reduce using rule 76 (expression -> FALSE .)
    OR              reduce using rule 76 (expression -> FALSE .)
    EQUAL_EQUAL     reduce using rule 76 (expression -> FALSE .)
    NOT_EQUAL       reduce using rule 76 (expression -> FALSE .)
    GREATER         reduce using rule 76 (expression -> FALSE .)
    GREATER_EQUAL   reduce using rule 76 (expression -> FALSE .)
    LESS            reduce using rule 76 (expression -> FALSE .)
    LESS_EQUAL      reduce using rule 76 (expression -> FALSE .)
    NEWLINE         reduce using rule 76 (expression -> FALSE .)
    PRINT           reduce using rule 76 (expression -> FALSE .)
    ID              reduce using rule 76 (expression -> FALSE .)
    IF              reduce using rule 76 (expression -> FALSE .)
    WHILE           reduce using rule 76 (expression -> FALSE .)
    FOR             reduce using rule 76 (expression -> FALSE .)
    DEF             reduce using rule 76 (expression -> FALSE .)
    RETURN          reduce using rule 76 (expression -> FALSE .)
    BREAK           reduce using rule 76 (expression -> FALSE .)
    NOT             reduce using rule 76 (expression -> FALSE .)
    LPAREN          reduce using rule 76 (expression -> FALSE .)
    NUMBER          reduce using rule 76 (expression -> FALSE .)
    FLOAT           reduce using rule 76 (expression -> FALSE .)
    INT             reduce using rule 76 (expression -> FALSE .)
    STRING          reduce using rule 76 (expression -> FALSE .)
    TRUE            reduce using rule 76 (expression -> FALSE .)
    FALSE           reduce using rule 76 (expression -> FALSE .)
    $end            reduce using rule 76 (expression -> FALSE .)
    ELIF            reduce using rule 76 (expression -> FALSE .)
    ELSE            reduce using rule 76 (expression -> FALSE .)
    RPAREN          reduce using rule 76 (expression -> FALSE .)
    COLON           reduce using rule 76 (expression -> FALSE .)
    COMMA           reduce using rule 76 (expression -> FALSE .)
    RBRACKET        reduce using rule 76 (expression -> FALSE .)


state 35

    (35) input_multiple -> id_list . EQUALS INPUT LPAREN STRING RPAREN

    EQUALS          shift and go to state 66


state 36

    (2) statements -> statement NEWLINE . statements
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    statement                      shift and go to state 3
    statements                     shift and go to state 67
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    expression                     shift and go to state 16
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 37

    (3) statements -> statement statements .

    $end            reduce using rule 3 (statements -> statement statements .)
    ELIF            reduce using rule 3 (statements -> statement statements .)
    ELSE            reduce using rule 3 (statements -> statement statements .)
    NEWLINE         reduce using rule 3 (statements -> statement statements .)
    PRINT           reduce using rule 3 (statements -> statement statements .)
    ID              reduce using rule 3 (statements -> statement statements .)
    IF              reduce using rule 3 (statements -> statement statements .)
    WHILE           reduce using rule 3 (statements -> statement statements .)
    FOR             reduce using rule 3 (statements -> statement statements .)
    DEF             reduce using rule 3 (statements -> statement statements .)
    RETURN          reduce using rule 3 (statements -> statement statements .)
    BREAK           reduce using rule 3 (statements -> statement statements .)
    MINUS           reduce using rule 3 (statements -> statement statements .)
    NOT             reduce using rule 3 (statements -> statement statements .)
    LPAREN          reduce using rule 3 (statements -> statement statements .)
    NUMBER          reduce using rule 3 (statements -> statement statements .)
    FLOAT           reduce using rule 3 (statements -> statement statements .)
    INT             reduce using rule 3 (statements -> statement statements .)
    STRING          reduce using rule 3 (statements -> statement statements .)
    TRUE            reduce using rule 3 (statements -> statement statements .)
    FALSE           reduce using rule 3 (statements -> statement statements .)


state 38

    (55) expression -> expression PLUS . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 68

state 39

    (56) expression -> expression MINUS . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 69

state 40

    (57) expression -> expression TIMES . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 70

state 41

    (58) expression -> expression DIVIDE . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 71

state 42

    (59) expression -> expression POWER . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 72

state 43

    (60) expression -> expression AND . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 73

state 44

    (61) expression -> expression OR . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 74

state 45

    (62) expression -> expression EQUAL_EQUAL . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 75

state 46

    (63) expression -> expression NOT_EQUAL . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 76

state 47

    (64) expression -> expression GREATER . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 77

state 48

    (65) expression -> expression GREATER_EQUAL . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 78

state 49

    (66) expression -> expression LESS . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 79

state 50

    (67) expression -> expression LESS_EQUAL . expression
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 80

state 51

    (29) print_stmt -> PRINT LPAREN . print_arguments RPAREN
    (30) print_arguments -> . expression
    (31) print_arguments -> . expression COMMA print_arguments
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    print_arguments                shift and go to state 81
    expression                     shift and go to state 82

state 52

    (70) expression -> LPAREN expression . RPAREN
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    RPAREN          shift and go to state 83
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 53

    (42) expression -> ID . LBRACKET expression RBRACKET
    (43) expression -> ID . DOT APPEND LPAREN expression RPAREN
    (77) expression -> ID .

    LBRACKET        shift and go to state 56
    DOT             shift and go to state 57
    RPAREN          reduce using rule 77 (expression -> ID .)
    PLUS            reduce using rule 77 (expression -> ID .)
    MINUS           reduce using rule 77 (expression -> ID .)
    TIMES           reduce using rule 77 (expression -> ID .)
    DIVIDE          reduce using rule 77 (expression -> ID .)
    POWER           reduce using rule 77 (expression -> ID .)
    AND             reduce using rule 77 (expression -> ID .)
    OR              reduce using rule 77 (expression -> ID .)
    EQUAL_EQUAL     reduce using rule 77 (expression -> ID .)
    NOT_EQUAL       reduce using rule 77 (expression -> ID .)
    GREATER         reduce using rule 77 (expression -> ID .)
    GREATER_EQUAL   reduce using rule 77 (expression -> ID .)
    LESS            reduce using rule 77 (expression -> ID .)
    LESS_EQUAL      reduce using rule 77 (expression -> ID .)
    COLON           reduce using rule 77 (expression -> ID .)
    NEWLINE         reduce using rule 77 (expression -> ID .)
    PRINT           reduce using rule 77 (expression -> ID .)
    ID              reduce using rule 77 (expression -> ID .)
    IF              reduce using rule 77 (expression -> ID .)
    WHILE           reduce using rule 77 (expression -> ID .)
    FOR             reduce using rule 77 (expression -> ID .)
    DEF             reduce using rule 77 (expression -> ID .)
    RETURN          reduce using rule 77 (expression -> ID .)
    BREAK           reduce using rule 77 (expression -> ID .)
    NOT             reduce using rule 77 (expression -> ID .)
    LPAREN          reduce using rule 77 (expression -> ID .)
    NUMBER          reduce using rule 77 (expression -> ID .)
    FLOAT           reduce using rule 77 (expression -> ID .)
    INT             reduce using rule 77 (expression -> ID .)
    STRING          reduce using rule 77 (expression -> ID .)
    TRUE            reduce using rule 77 (expression -> ID .)
    FALSE           reduce using rule 77 (expression -> ID .)
    $end            reduce using rule 77 (expression -> ID .)
    ELIF            reduce using rule 77 (expression -> ID .)
    ELSE            reduce using rule 77 (expression -> ID .)
    COMMA           reduce using rule 77 (expression -> ID .)
    RBRACKET        reduce using rule 77 (expression -> ID .)


state 54

    (32) assignment_stmt -> ID EQUALS . expression
    (33) input_stmt -> ID EQUALS . INPUT LPAREN STRING RPAREN
    (38) list_stmt -> ID EQUALS . LBRACKET list_elements RBRACKET
    (39) list_stmt -> ID EQUALS . LBRACKET RBRACKET
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    INPUT           shift and go to state 85
    LBRACKET        shift and go to state 86
    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 84

state 55

    (23) function_call -> ID LPAREN . argument_list RPAREN
    (24) function_call -> ID LPAREN . RPAREN
    (25) argument_list -> . expression
    (26) argument_list -> . expression COMMA argument_list
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    RPAREN          shift and go to state 88
    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    argument_list                  shift and go to state 87
    expression                     shift and go to state 89

state 56

    (42) expression -> ID LBRACKET . expression RBRACKET
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 90

state 57

    (43) expression -> ID DOT . APPEND LPAREN expression RPAREN

    APPEND          shift and go to state 91


state 58

    (36) id_list -> ID COMMA . ID
    (37) id_list -> ID COMMA . id_list
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

    ID              shift and go to state 92

    id_list                        shift and go to state 93

state 59

    (45) if_stmt -> IF expression . COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> IF expression . COLON statements elif_stmt else_stmt
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    COLON           shift and go to state 94
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 60

    (53) while_stmt -> WHILE expression . COLON NEWLINE statements
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    COLON           shift and go to state 95
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 61

    (54) for_stmt -> FOR ID . IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements

    IN              shift and go to state 96


state 62

    (19) function_def -> DEF ID . LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> DEF ID . LPAREN RPAREN COLON NEWLINE statements

    LPAREN          shift and go to state 97


state 63

    (27) return_stmt -> RETURN expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for MINUS resolved as shift
    NEWLINE         reduce using rule 27 (return_stmt -> RETURN expression .)
    PRINT           reduce using rule 27 (return_stmt -> RETURN expression .)
    ID              reduce using rule 27 (return_stmt -> RETURN expression .)
    IF              reduce using rule 27 (return_stmt -> RETURN expression .)
    WHILE           reduce using rule 27 (return_stmt -> RETURN expression .)
    FOR             reduce using rule 27 (return_stmt -> RETURN expression .)
    DEF             reduce using rule 27 (return_stmt -> RETURN expression .)
    RETURN          reduce using rule 27 (return_stmt -> RETURN expression .)
    BREAK           reduce using rule 27 (return_stmt -> RETURN expression .)
    NOT             reduce using rule 27 (return_stmt -> RETURN expression .)
    LPAREN          reduce using rule 27 (return_stmt -> RETURN expression .)
    NUMBER          reduce using rule 27 (return_stmt -> RETURN expression .)
    FLOAT           reduce using rule 27 (return_stmt -> RETURN expression .)
    INT             reduce using rule 27 (return_stmt -> RETURN expression .)
    STRING          reduce using rule 27 (return_stmt -> RETURN expression .)
    TRUE            reduce using rule 27 (return_stmt -> RETURN expression .)
    FALSE           reduce using rule 27 (return_stmt -> RETURN expression .)
    $end            reduce using rule 27 (return_stmt -> RETURN expression .)
    ELIF            reduce using rule 27 (return_stmt -> RETURN expression .)
    ELSE            reduce using rule 27 (return_stmt -> RETURN expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! MINUS           [ reduce using rule 27 (return_stmt -> RETURN expression .) ]


state 64

    (68) expression -> MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 68 (expression -> MINUS expression .)
    MINUS           reduce using rule 68 (expression -> MINUS expression .)
    TIMES           reduce using rule 68 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 68 (expression -> MINUS expression .)
    POWER           reduce using rule 68 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 68 (expression -> MINUS expression .)
    PRINT           reduce using rule 68 (expression -> MINUS expression .)
    ID              reduce using rule 68 (expression -> MINUS expression .)
    IF              reduce using rule 68 (expression -> MINUS expression .)
    WHILE           reduce using rule 68 (expression -> MINUS expression .)
    FOR             reduce using rule 68 (expression -> MINUS expression .)
    DEF             reduce using rule 68 (expression -> MINUS expression .)
    RETURN          reduce using rule 68 (expression -> MINUS expression .)
    BREAK           reduce using rule 68 (expression -> MINUS expression .)
    NOT             reduce using rule 68 (expression -> MINUS expression .)
    LPAREN          reduce using rule 68 (expression -> MINUS expression .)
    NUMBER          reduce using rule 68 (expression -> MINUS expression .)
    FLOAT           reduce using rule 68 (expression -> MINUS expression .)
    INT             reduce using rule 68 (expression -> MINUS expression .)
    STRING          reduce using rule 68 (expression -> MINUS expression .)
    TRUE            reduce using rule 68 (expression -> MINUS expression .)
    FALSE           reduce using rule 68 (expression -> MINUS expression .)
    $end            reduce using rule 68 (expression -> MINUS expression .)
    ELIF            reduce using rule 68 (expression -> MINUS expression .)
    ELSE            reduce using rule 68 (expression -> MINUS expression .)
    RPAREN          reduce using rule 68 (expression -> MINUS expression .)
    COLON           reduce using rule 68 (expression -> MINUS expression .)
    COMMA           reduce using rule 68 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 68 (expression -> MINUS expression .)
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! AND             [ reduce using rule 68 (expression -> MINUS expression .) ]
  ! OR              [ reduce using rule 68 (expression -> MINUS expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 68 (expression -> MINUS expression .) ]
  ! NOT_EQUAL       [ reduce using rule 68 (expression -> MINUS expression .) ]
  ! GREATER         [ reduce using rule 68 (expression -> MINUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 68 (expression -> MINUS expression .) ]
  ! LESS            [ reduce using rule 68 (expression -> MINUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 68 (expression -> MINUS expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]


state 65

    (69) expression -> NOT expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for POWER resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
  ! shift/reduce conflict for EQUAL_EQUAL resolved as shift
  ! shift/reduce conflict for NOT_EQUAL resolved as shift
  ! shift/reduce conflict for GREATER resolved as shift
  ! shift/reduce conflict for GREATER_EQUAL resolved as shift
  ! shift/reduce conflict for LESS resolved as shift
  ! shift/reduce conflict for LESS_EQUAL resolved as shift
    NEWLINE         reduce using rule 69 (expression -> NOT expression .)
    PRINT           reduce using rule 69 (expression -> NOT expression .)
    ID              reduce using rule 69 (expression -> NOT expression .)
    IF              reduce using rule 69 (expression -> NOT expression .)
    WHILE           reduce using rule 69 (expression -> NOT expression .)
    FOR             reduce using rule 69 (expression -> NOT expression .)
    DEF             reduce using rule 69 (expression -> NOT expression .)
    RETURN          reduce using rule 69 (expression -> NOT expression .)
    BREAK           reduce using rule 69 (expression -> NOT expression .)
    NOT             reduce using rule 69 (expression -> NOT expression .)
    LPAREN          reduce using rule 69 (expression -> NOT expression .)
    NUMBER          reduce using rule 69 (expression -> NOT expression .)
    FLOAT           reduce using rule 69 (expression -> NOT expression .)
    INT             reduce using rule 69 (expression -> NOT expression .)
    STRING          reduce using rule 69 (expression -> NOT expression .)
    TRUE            reduce using rule 69 (expression -> NOT expression .)
    FALSE           reduce using rule 69 (expression -> NOT expression .)
    $end            reduce using rule 69 (expression -> NOT expression .)
    ELIF            reduce using rule 69 (expression -> NOT expression .)
    ELSE            reduce using rule 69 (expression -> NOT expression .)
    RPAREN          reduce using rule 69 (expression -> NOT expression .)
    COLON           reduce using rule 69 (expression -> NOT expression .)
    COMMA           reduce using rule 69 (expression -> NOT expression .)
    RBRACKET        reduce using rule 69 (expression -> NOT expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! PLUS            [ reduce using rule 69 (expression -> NOT expression .) ]
  ! MINUS           [ reduce using rule 69 (expression -> NOT expression .) ]
  ! TIMES           [ reduce using rule 69 (expression -> NOT expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression -> NOT expression .) ]
  ! POWER           [ reduce using rule 69 (expression -> NOT expression .) ]
  ! AND             [ reduce using rule 69 (expression -> NOT expression .) ]
  ! OR              [ reduce using rule 69 (expression -> NOT expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 69 (expression -> NOT expression .) ]
  ! NOT_EQUAL       [ reduce using rule 69 (expression -> NOT expression .) ]
  ! GREATER         [ reduce using rule 69 (expression -> NOT expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 69 (expression -> NOT expression .) ]
  ! LESS            [ reduce using rule 69 (expression -> NOT expression .) ]
  ! LESS_EQUAL      [ reduce using rule 69 (expression -> NOT expression .) ]


state 66

    (35) input_multiple -> id_list EQUALS . INPUT LPAREN STRING RPAREN

    INPUT           shift and go to state 98


state 67

    (2) statements -> statement NEWLINE statements .

    $end            reduce using rule 2 (statements -> statement NEWLINE statements .)
    ELIF            reduce using rule 2 (statements -> statement NEWLINE statements .)
    ELSE            reduce using rule 2 (statements -> statement NEWLINE statements .)
    NEWLINE         reduce using rule 2 (statements -> statement NEWLINE statements .)
    PRINT           reduce using rule 2 (statements -> statement NEWLINE statements .)
    ID              reduce using rule 2 (statements -> statement NEWLINE statements .)
    IF              reduce using rule 2 (statements -> statement NEWLINE statements .)
    WHILE           reduce using rule 2 (statements -> statement NEWLINE statements .)
    FOR             reduce using rule 2 (statements -> statement NEWLINE statements .)
    DEF             reduce using rule 2 (statements -> statement NEWLINE statements .)
    RETURN          reduce using rule 2 (statements -> statement NEWLINE statements .)
    BREAK           reduce using rule 2 (statements -> statement NEWLINE statements .)
    MINUS           reduce using rule 2 (statements -> statement NEWLINE statements .)
    NOT             reduce using rule 2 (statements -> statement NEWLINE statements .)
    LPAREN          reduce using rule 2 (statements -> statement NEWLINE statements .)
    NUMBER          reduce using rule 2 (statements -> statement NEWLINE statements .)
    FLOAT           reduce using rule 2 (statements -> statement NEWLINE statements .)
    INT             reduce using rule 2 (statements -> statement NEWLINE statements .)
    STRING          reduce using rule 2 (statements -> statement NEWLINE statements .)
    TRUE            reduce using rule 2 (statements -> statement NEWLINE statements .)
    FALSE           reduce using rule 2 (statements -> statement NEWLINE statements .)


state 68

    (55) expression -> expression PLUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 55 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 55 (expression -> expression PLUS expression .)
    POWER           reduce using rule 55 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 55 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 55 (expression -> expression PLUS expression .)
    ID              reduce using rule 55 (expression -> expression PLUS expression .)
    IF              reduce using rule 55 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 55 (expression -> expression PLUS expression .)
    FOR             reduce using rule 55 (expression -> expression PLUS expression .)
    DEF             reduce using rule 55 (expression -> expression PLUS expression .)
    RETURN          reduce using rule 55 (expression -> expression PLUS expression .)
    BREAK           reduce using rule 55 (expression -> expression PLUS expression .)
    NOT             reduce using rule 55 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 55 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 55 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 55 (expression -> expression PLUS expression .)
    INT             reduce using rule 55 (expression -> expression PLUS expression .)
    STRING          reduce using rule 55 (expression -> expression PLUS expression .)
    TRUE            reduce using rule 55 (expression -> expression PLUS expression .)
    FALSE           reduce using rule 55 (expression -> expression PLUS expression .)
    $end            reduce using rule 55 (expression -> expression PLUS expression .)
    ELIF            reduce using rule 55 (expression -> expression PLUS expression .)
    ELSE            reduce using rule 55 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 55 (expression -> expression PLUS expression .)
    COLON           reduce using rule 55 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 55 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 55 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! TIMES           [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! OR              [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! NOT_EQUAL       [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! GREATER         [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! LESS            [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 55 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! POWER           [ shift and go to state 42 ]


state 69

    (56) expression -> expression MINUS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 56 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 56 (expression -> expression MINUS expression .)
    POWER           reduce using rule 56 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 56 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 56 (expression -> expression MINUS expression .)
    ID              reduce using rule 56 (expression -> expression MINUS expression .)
    IF              reduce using rule 56 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 56 (expression -> expression MINUS expression .)
    FOR             reduce using rule 56 (expression -> expression MINUS expression .)
    DEF             reduce using rule 56 (expression -> expression MINUS expression .)
    RETURN          reduce using rule 56 (expression -> expression MINUS expression .)
    BREAK           reduce using rule 56 (expression -> expression MINUS expression .)
    NOT             reduce using rule 56 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 56 (expression -> expression MINUS expression .)
    NUMBER          reduce using rule 56 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 56 (expression -> expression MINUS expression .)
    INT             reduce using rule 56 (expression -> expression MINUS expression .)
    STRING          reduce using rule 56 (expression -> expression MINUS expression .)
    TRUE            reduce using rule 56 (expression -> expression MINUS expression .)
    FALSE           reduce using rule 56 (expression -> expression MINUS expression .)
    $end            reduce using rule 56 (expression -> expression MINUS expression .)
    ELIF            reduce using rule 56 (expression -> expression MINUS expression .)
    ELSE            reduce using rule 56 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 56 (expression -> expression MINUS expression .)
    COLON           reduce using rule 56 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 56 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 56 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! TIMES           [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! AND             [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! OR              [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! NOT_EQUAL       [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! GREATER         [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! LESS            [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! LESS_EQUAL      [ reduce using rule 56 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! POWER           [ shift and go to state 42 ]


state 70

    (57) expression -> expression TIMES expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 57 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 57 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 57 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 57 (expression -> expression TIMES expression .)
    POWER           reduce using rule 57 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 57 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 57 (expression -> expression TIMES expression .)
    ID              reduce using rule 57 (expression -> expression TIMES expression .)
    IF              reduce using rule 57 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 57 (expression -> expression TIMES expression .)
    FOR             reduce using rule 57 (expression -> expression TIMES expression .)
    DEF             reduce using rule 57 (expression -> expression TIMES expression .)
    RETURN          reduce using rule 57 (expression -> expression TIMES expression .)
    BREAK           reduce using rule 57 (expression -> expression TIMES expression .)
    NOT             reduce using rule 57 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 57 (expression -> expression TIMES expression .)
    NUMBER          reduce using rule 57 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 57 (expression -> expression TIMES expression .)
    INT             reduce using rule 57 (expression -> expression TIMES expression .)
    STRING          reduce using rule 57 (expression -> expression TIMES expression .)
    TRUE            reduce using rule 57 (expression -> expression TIMES expression .)
    FALSE           reduce using rule 57 (expression -> expression TIMES expression .)
    $end            reduce using rule 57 (expression -> expression TIMES expression .)
    ELIF            reduce using rule 57 (expression -> expression TIMES expression .)
    ELSE            reduce using rule 57 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 57 (expression -> expression TIMES expression .)
    COLON           reduce using rule 57 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 57 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 57 (expression -> expression TIMES expression .)
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! AND             [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! OR              [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! NOT_EQUAL       [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! GREATER         [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! LESS            [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! LESS_EQUAL      [ reduce using rule 57 (expression -> expression TIMES expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]


state 71

    (58) expression -> expression DIVIDE expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 58 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 58 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 58 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 58 (expression -> expression DIVIDE expression .)
    POWER           reduce using rule 58 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 58 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 58 (expression -> expression DIVIDE expression .)
    ID              reduce using rule 58 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 58 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 58 (expression -> expression DIVIDE expression .)
    FOR             reduce using rule 58 (expression -> expression DIVIDE expression .)
    DEF             reduce using rule 58 (expression -> expression DIVIDE expression .)
    RETURN          reduce using rule 58 (expression -> expression DIVIDE expression .)
    BREAK           reduce using rule 58 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 58 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 58 (expression -> expression DIVIDE expression .)
    NUMBER          reduce using rule 58 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 58 (expression -> expression DIVIDE expression .)
    INT             reduce using rule 58 (expression -> expression DIVIDE expression .)
    STRING          reduce using rule 58 (expression -> expression DIVIDE expression .)
    TRUE            reduce using rule 58 (expression -> expression DIVIDE expression .)
    FALSE           reduce using rule 58 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 58 (expression -> expression DIVIDE expression .)
    ELIF            reduce using rule 58 (expression -> expression DIVIDE expression .)
    ELSE            reduce using rule 58 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 58 (expression -> expression DIVIDE expression .)
    COLON           reduce using rule 58 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 58 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 58 (expression -> expression DIVIDE expression .)
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! AND             [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! OR              [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! NOT_EQUAL       [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! GREATER         [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! LESS            [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! LESS_EQUAL      [ reduce using rule 58 (expression -> expression DIVIDE expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]


state 72

    (59) expression -> expression POWER expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    NEWLINE         reduce using rule 59 (expression -> expression POWER expression .)
    PRINT           reduce using rule 59 (expression -> expression POWER expression .)
    ID              reduce using rule 59 (expression -> expression POWER expression .)
    IF              reduce using rule 59 (expression -> expression POWER expression .)
    WHILE           reduce using rule 59 (expression -> expression POWER expression .)
    FOR             reduce using rule 59 (expression -> expression POWER expression .)
    DEF             reduce using rule 59 (expression -> expression POWER expression .)
    RETURN          reduce using rule 59 (expression -> expression POWER expression .)
    BREAK           reduce using rule 59 (expression -> expression POWER expression .)
    NOT             reduce using rule 59 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 59 (expression -> expression POWER expression .)
    NUMBER          reduce using rule 59 (expression -> expression POWER expression .)
    FLOAT           reduce using rule 59 (expression -> expression POWER expression .)
    INT             reduce using rule 59 (expression -> expression POWER expression .)
    STRING          reduce using rule 59 (expression -> expression POWER expression .)
    TRUE            reduce using rule 59 (expression -> expression POWER expression .)
    FALSE           reduce using rule 59 (expression -> expression POWER expression .)
    $end            reduce using rule 59 (expression -> expression POWER expression .)
    ELIF            reduce using rule 59 (expression -> expression POWER expression .)
    ELSE            reduce using rule 59 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 59 (expression -> expression POWER expression .)
    COLON           reduce using rule 59 (expression -> expression POWER expression .)
    COMMA           reduce using rule 59 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 59 (expression -> expression POWER expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! PLUS            [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! MINUS           [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! TIMES           [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! DIVIDE          [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! POWER           [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! AND             [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! OR              [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! EQUAL_EQUAL     [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! NOT_EQUAL       [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! GREATER         [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! LESS            [ reduce using rule 59 (expression -> expression POWER expression .) ]
  ! LESS_EQUAL      [ reduce using rule 59 (expression -> expression POWER expression .) ]


state 73

    (60) expression -> expression AND expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 60 (expression -> expression AND expression .)
    MINUS           reduce using rule 60 (expression -> expression AND expression .)
    TIMES           reduce using rule 60 (expression -> expression AND expression .)
    DIVIDE          reduce using rule 60 (expression -> expression AND expression .)
    POWER           reduce using rule 60 (expression -> expression AND expression .)
    AND             reduce using rule 60 (expression -> expression AND expression .)
    OR              reduce using rule 60 (expression -> expression AND expression .)
    NEWLINE         reduce using rule 60 (expression -> expression AND expression .)
    PRINT           reduce using rule 60 (expression -> expression AND expression .)
    ID              reduce using rule 60 (expression -> expression AND expression .)
    IF              reduce using rule 60 (expression -> expression AND expression .)
    WHILE           reduce using rule 60 (expression -> expression AND expression .)
    FOR             reduce using rule 60 (expression -> expression AND expression .)
    DEF             reduce using rule 60 (expression -> expression AND expression .)
    RETURN          reduce using rule 60 (expression -> expression AND expression .)
    BREAK           reduce using rule 60 (expression -> expression AND expression .)
    NOT             reduce using rule 60 (expression -> expression AND expression .)
    LPAREN          reduce using rule 60 (expression -> expression AND expression .)
    NUMBER          reduce using rule 60 (expression -> expression AND expression .)
    FLOAT           reduce using rule 60 (expression -> expression AND expression .)
    INT             reduce using rule 60 (expression -> expression AND expression .)
    STRING          reduce using rule 60 (expression -> expression AND expression .)
    TRUE            reduce using rule 60 (expression -> expression AND expression .)
    FALSE           reduce using rule 60 (expression -> expression AND expression .)
    $end            reduce using rule 60 (expression -> expression AND expression .)
    ELIF            reduce using rule 60 (expression -> expression AND expression .)
    ELSE            reduce using rule 60 (expression -> expression AND expression .)
    RPAREN          reduce using rule 60 (expression -> expression AND expression .)
    COLON           reduce using rule 60 (expression -> expression AND expression .)
    COMMA           reduce using rule 60 (expression -> expression AND expression .)
    RBRACKET        reduce using rule 60 (expression -> expression AND expression .)
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! EQUAL_EQUAL     [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! NOT_EQUAL       [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! GREATER         [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! LESS            [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! LESS_EQUAL      [ reduce using rule 60 (expression -> expression AND expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 74

    (61) expression -> expression OR expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 61 (expression -> expression OR expression .)
    MINUS           reduce using rule 61 (expression -> expression OR expression .)
    TIMES           reduce using rule 61 (expression -> expression OR expression .)
    DIVIDE          reduce using rule 61 (expression -> expression OR expression .)
    POWER           reduce using rule 61 (expression -> expression OR expression .)
    AND             reduce using rule 61 (expression -> expression OR expression .)
    OR              reduce using rule 61 (expression -> expression OR expression .)
    NEWLINE         reduce using rule 61 (expression -> expression OR expression .)
    PRINT           reduce using rule 61 (expression -> expression OR expression .)
    ID              reduce using rule 61 (expression -> expression OR expression .)
    IF              reduce using rule 61 (expression -> expression OR expression .)
    WHILE           reduce using rule 61 (expression -> expression OR expression .)
    FOR             reduce using rule 61 (expression -> expression OR expression .)
    DEF             reduce using rule 61 (expression -> expression OR expression .)
    RETURN          reduce using rule 61 (expression -> expression OR expression .)
    BREAK           reduce using rule 61 (expression -> expression OR expression .)
    NOT             reduce using rule 61 (expression -> expression OR expression .)
    LPAREN          reduce using rule 61 (expression -> expression OR expression .)
    NUMBER          reduce using rule 61 (expression -> expression OR expression .)
    FLOAT           reduce using rule 61 (expression -> expression OR expression .)
    INT             reduce using rule 61 (expression -> expression OR expression .)
    STRING          reduce using rule 61 (expression -> expression OR expression .)
    TRUE            reduce using rule 61 (expression -> expression OR expression .)
    FALSE           reduce using rule 61 (expression -> expression OR expression .)
    $end            reduce using rule 61 (expression -> expression OR expression .)
    ELIF            reduce using rule 61 (expression -> expression OR expression .)
    ELSE            reduce using rule 61 (expression -> expression OR expression .)
    RPAREN          reduce using rule 61 (expression -> expression OR expression .)
    COLON           reduce using rule 61 (expression -> expression OR expression .)
    COMMA           reduce using rule 61 (expression -> expression OR expression .)
    RBRACKET        reduce using rule 61 (expression -> expression OR expression .)
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! EQUAL_EQUAL     [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! NOT_EQUAL       [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! GREATER         [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! GREATER_EQUAL   [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! LESS            [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! LESS_EQUAL      [ reduce using rule 61 (expression -> expression OR expression .) ]
  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]


state 75

    (62) expression -> expression EQUAL_EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    MINUS           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    TIMES           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    DIVIDE          reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    POWER           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    AND             reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    OR              reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    EQUAL_EQUAL     reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    NOT_EQUAL       reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    GREATER         reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    LESS            reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    LESS_EQUAL      reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    NEWLINE         reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    PRINT           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    ID              reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    IF              reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    WHILE           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    FOR             reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    DEF             reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    RETURN          reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    BREAK           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    NOT             reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    LPAREN          reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    NUMBER          reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    FLOAT           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    INT             reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    STRING          reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    TRUE            reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    FALSE           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    $end            reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    ELIF            reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    ELSE            reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    RPAREN          reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    COLON           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    COMMA           reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)
    RBRACKET        reduce using rule 62 (expression -> expression EQUAL_EQUAL expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! EQUAL_EQUAL     [ shift and go to state 45 ]
  ! NOT_EQUAL       [ shift and go to state 46 ]
  ! GREATER         [ shift and go to state 47 ]
  ! GREATER_EQUAL   [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]


state 76

    (63) expression -> expression NOT_EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    MINUS           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    TIMES           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    DIVIDE          reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    POWER           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    AND             reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    OR              reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    EQUAL_EQUAL     reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    NOT_EQUAL       reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    GREATER         reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    LESS            reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    LESS_EQUAL      reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    NEWLINE         reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    PRINT           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    ID              reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    IF              reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    WHILE           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    FOR             reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    DEF             reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    RETURN          reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    BREAK           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    NOT             reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    LPAREN          reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    NUMBER          reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    FLOAT           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    INT             reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    STRING          reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    TRUE            reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    FALSE           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    $end            reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    ELIF            reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    ELSE            reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    RPAREN          reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    COLON           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    COMMA           reduce using rule 63 (expression -> expression NOT_EQUAL expression .)
    RBRACKET        reduce using rule 63 (expression -> expression NOT_EQUAL expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! EQUAL_EQUAL     [ shift and go to state 45 ]
  ! NOT_EQUAL       [ shift and go to state 46 ]
  ! GREATER         [ shift and go to state 47 ]
  ! GREATER_EQUAL   [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]


state 77

    (64) expression -> expression GREATER expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 64 (expression -> expression GREATER expression .)
    MINUS           reduce using rule 64 (expression -> expression GREATER expression .)
    TIMES           reduce using rule 64 (expression -> expression GREATER expression .)
    DIVIDE          reduce using rule 64 (expression -> expression GREATER expression .)
    POWER           reduce using rule 64 (expression -> expression GREATER expression .)
    AND             reduce using rule 64 (expression -> expression GREATER expression .)
    OR              reduce using rule 64 (expression -> expression GREATER expression .)
    EQUAL_EQUAL     reduce using rule 64 (expression -> expression GREATER expression .)
    NOT_EQUAL       reduce using rule 64 (expression -> expression GREATER expression .)
    GREATER         reduce using rule 64 (expression -> expression GREATER expression .)
    GREATER_EQUAL   reduce using rule 64 (expression -> expression GREATER expression .)
    LESS            reduce using rule 64 (expression -> expression GREATER expression .)
    LESS_EQUAL      reduce using rule 64 (expression -> expression GREATER expression .)
    NEWLINE         reduce using rule 64 (expression -> expression GREATER expression .)
    PRINT           reduce using rule 64 (expression -> expression GREATER expression .)
    ID              reduce using rule 64 (expression -> expression GREATER expression .)
    IF              reduce using rule 64 (expression -> expression GREATER expression .)
    WHILE           reduce using rule 64 (expression -> expression GREATER expression .)
    FOR             reduce using rule 64 (expression -> expression GREATER expression .)
    DEF             reduce using rule 64 (expression -> expression GREATER expression .)
    RETURN          reduce using rule 64 (expression -> expression GREATER expression .)
    BREAK           reduce using rule 64 (expression -> expression GREATER expression .)
    NOT             reduce using rule 64 (expression -> expression GREATER expression .)
    LPAREN          reduce using rule 64 (expression -> expression GREATER expression .)
    NUMBER          reduce using rule 64 (expression -> expression GREATER expression .)
    FLOAT           reduce using rule 64 (expression -> expression GREATER expression .)
    INT             reduce using rule 64 (expression -> expression GREATER expression .)
    STRING          reduce using rule 64 (expression -> expression GREATER expression .)
    TRUE            reduce using rule 64 (expression -> expression GREATER expression .)
    FALSE           reduce using rule 64 (expression -> expression GREATER expression .)
    $end            reduce using rule 64 (expression -> expression GREATER expression .)
    ELIF            reduce using rule 64 (expression -> expression GREATER expression .)
    ELSE            reduce using rule 64 (expression -> expression GREATER expression .)
    RPAREN          reduce using rule 64 (expression -> expression GREATER expression .)
    COLON           reduce using rule 64 (expression -> expression GREATER expression .)
    COMMA           reduce using rule 64 (expression -> expression GREATER expression .)
    RBRACKET        reduce using rule 64 (expression -> expression GREATER expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! EQUAL_EQUAL     [ shift and go to state 45 ]
  ! NOT_EQUAL       [ shift and go to state 46 ]
  ! GREATER         [ shift and go to state 47 ]
  ! GREATER_EQUAL   [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]


state 78

    (65) expression -> expression GREATER_EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    MINUS           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    TIMES           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    DIVIDE          reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    POWER           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    AND             reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    OR              reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    EQUAL_EQUAL     reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    NOT_EQUAL       reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    GREATER         reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    LESS            reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    LESS_EQUAL      reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    NEWLINE         reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    PRINT           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    ID              reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    IF              reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    WHILE           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    FOR             reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    DEF             reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    RETURN          reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    BREAK           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    NOT             reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    LPAREN          reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    NUMBER          reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    FLOAT           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    INT             reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    STRING          reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    TRUE            reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    FALSE           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    $end            reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    ELIF            reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    ELSE            reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    RPAREN          reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    COLON           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    COMMA           reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)
    RBRACKET        reduce using rule 65 (expression -> expression GREATER_EQUAL expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! EQUAL_EQUAL     [ shift and go to state 45 ]
  ! NOT_EQUAL       [ shift and go to state 46 ]
  ! GREATER         [ shift and go to state 47 ]
  ! GREATER_EQUAL   [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]


state 79

    (66) expression -> expression LESS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 66 (expression -> expression LESS expression .)
    MINUS           reduce using rule 66 (expression -> expression LESS expression .)
    TIMES           reduce using rule 66 (expression -> expression LESS expression .)
    DIVIDE          reduce using rule 66 (expression -> expression LESS expression .)
    POWER           reduce using rule 66 (expression -> expression LESS expression .)
    AND             reduce using rule 66 (expression -> expression LESS expression .)
    OR              reduce using rule 66 (expression -> expression LESS expression .)
    EQUAL_EQUAL     reduce using rule 66 (expression -> expression LESS expression .)
    NOT_EQUAL       reduce using rule 66 (expression -> expression LESS expression .)
    GREATER         reduce using rule 66 (expression -> expression LESS expression .)
    GREATER_EQUAL   reduce using rule 66 (expression -> expression LESS expression .)
    LESS            reduce using rule 66 (expression -> expression LESS expression .)
    LESS_EQUAL      reduce using rule 66 (expression -> expression LESS expression .)
    NEWLINE         reduce using rule 66 (expression -> expression LESS expression .)
    PRINT           reduce using rule 66 (expression -> expression LESS expression .)
    ID              reduce using rule 66 (expression -> expression LESS expression .)
    IF              reduce using rule 66 (expression -> expression LESS expression .)
    WHILE           reduce using rule 66 (expression -> expression LESS expression .)
    FOR             reduce using rule 66 (expression -> expression LESS expression .)
    DEF             reduce using rule 66 (expression -> expression LESS expression .)
    RETURN          reduce using rule 66 (expression -> expression LESS expression .)
    BREAK           reduce using rule 66 (expression -> expression LESS expression .)
    NOT             reduce using rule 66 (expression -> expression LESS expression .)
    LPAREN          reduce using rule 66 (expression -> expression LESS expression .)
    NUMBER          reduce using rule 66 (expression -> expression LESS expression .)
    FLOAT           reduce using rule 66 (expression -> expression LESS expression .)
    INT             reduce using rule 66 (expression -> expression LESS expression .)
    STRING          reduce using rule 66 (expression -> expression LESS expression .)
    TRUE            reduce using rule 66 (expression -> expression LESS expression .)
    FALSE           reduce using rule 66 (expression -> expression LESS expression .)
    $end            reduce using rule 66 (expression -> expression LESS expression .)
    ELIF            reduce using rule 66 (expression -> expression LESS expression .)
    ELSE            reduce using rule 66 (expression -> expression LESS expression .)
    RPAREN          reduce using rule 66 (expression -> expression LESS expression .)
    COLON           reduce using rule 66 (expression -> expression LESS expression .)
    COMMA           reduce using rule 66 (expression -> expression LESS expression .)
    RBRACKET        reduce using rule 66 (expression -> expression LESS expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! EQUAL_EQUAL     [ shift and go to state 45 ]
  ! NOT_EQUAL       [ shift and go to state 46 ]
  ! GREATER         [ shift and go to state 47 ]
  ! GREATER_EQUAL   [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]


state 80

    (67) expression -> expression LESS_EQUAL expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    PLUS            reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    MINUS           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    TIMES           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    DIVIDE          reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    POWER           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    AND             reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    OR              reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    EQUAL_EQUAL     reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    NOT_EQUAL       reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    GREATER         reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    GREATER_EQUAL   reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    LESS            reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    LESS_EQUAL      reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    NEWLINE         reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    PRINT           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    ID              reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    IF              reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    WHILE           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    FOR             reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    DEF             reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    RETURN          reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    BREAK           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    NOT             reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    LPAREN          reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    NUMBER          reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    FLOAT           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    INT             reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    STRING          reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    TRUE            reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    FALSE           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    $end            reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    ELIF            reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    ELSE            reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    RPAREN          reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    COLON           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    COMMA           reduce using rule 67 (expression -> expression LESS_EQUAL expression .)
    RBRACKET        reduce using rule 67 (expression -> expression LESS_EQUAL expression .)

  ! PLUS            [ shift and go to state 38 ]
  ! MINUS           [ shift and go to state 39 ]
  ! TIMES           [ shift and go to state 40 ]
  ! DIVIDE          [ shift and go to state 41 ]
  ! POWER           [ shift and go to state 42 ]
  ! AND             [ shift and go to state 43 ]
  ! OR              [ shift and go to state 44 ]
  ! EQUAL_EQUAL     [ shift and go to state 45 ]
  ! NOT_EQUAL       [ shift and go to state 46 ]
  ! GREATER         [ shift and go to state 47 ]
  ! GREATER_EQUAL   [ shift and go to state 48 ]
  ! LESS            [ shift and go to state 49 ]
  ! LESS_EQUAL      [ shift and go to state 50 ]


state 81

    (29) print_stmt -> PRINT LPAREN print_arguments . RPAREN

    RPAREN          shift and go to state 99


state 82

    (30) print_arguments -> expression .
    (31) print_arguments -> expression . COMMA print_arguments
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    RPAREN          reduce using rule 30 (print_arguments -> expression .)
    COMMA           shift and go to state 100
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 83

    (70) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    EQUAL_EQUAL     reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    ID              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    FOR             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    DEF             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    BREAK           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    NUMBER          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    TRUE            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    FALSE           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    ELIF            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 70 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 70 (expression -> LPAREN expression RPAREN .)


state 84

    (32) assignment_stmt -> ID EQUALS expression .
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

  ! shift/reduce conflict for MINUS resolved as shift
    NEWLINE         reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    PRINT           reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    ID              reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    IF              reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    WHILE           reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    FOR             reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    DEF             reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    RETURN          reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    BREAK           reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    NOT             reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    LPAREN          reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    NUMBER          reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    FLOAT           reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    INT             reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    STRING          reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    TRUE            reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    FALSE           reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    $end            reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    ELIF            reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    ELSE            reduce using rule 32 (assignment_stmt -> ID EQUALS expression .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50

  ! MINUS           [ reduce using rule 32 (assignment_stmt -> ID EQUALS expression .) ]


state 85

    (33) input_stmt -> ID EQUALS INPUT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 101


state 86

    (38) list_stmt -> ID EQUALS LBRACKET . list_elements RBRACKET
    (39) list_stmt -> ID EQUALS LBRACKET . RBRACKET
    (40) list_elements -> . expression
    (41) list_elements -> . expression COMMA list_elements
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    RBRACKET        shift and go to state 103
    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    list_elements                  shift and go to state 102
    expression                     shift and go to state 104

state 87

    (23) function_call -> ID LPAREN argument_list . RPAREN

    RPAREN          shift and go to state 105


state 88

    (24) function_call -> ID LPAREN RPAREN .

    NEWLINE         reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    PRINT           reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    ID              reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    IF              reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    FOR             reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    DEF             reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    BREAK           reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    NOT             reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    NUMBER          reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    FLOAT           reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    INT             reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    STRING          reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    TRUE            reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    FALSE           reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    $end            reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    ELIF            reduce using rule 24 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 24 (function_call -> ID LPAREN RPAREN .)


state 89

    (25) argument_list -> expression .
    (26) argument_list -> expression . COMMA argument_list
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    RPAREN          reduce using rule 25 (argument_list -> expression .)
    COMMA           shift and go to state 106
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 90

    (42) expression -> ID LBRACKET expression . RBRACKET
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    RBRACKET        shift and go to state 107
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 91

    (43) expression -> ID DOT APPEND . LPAREN expression RPAREN

    LPAREN          shift and go to state 108


state 92

    (36) id_list -> ID COMMA ID .
    (36) id_list -> ID . COMMA ID
    (37) id_list -> ID . COMMA id_list

    EQUALS          reduce using rule 36 (id_list -> ID COMMA ID .)
    COMMA           shift and go to state 58


state 93

    (37) id_list -> ID COMMA id_list .

    EQUALS          reduce using rule 37 (id_list -> ID COMMA id_list .)


state 94

    (45) if_stmt -> IF expression COLON . NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> IF expression COLON . statements elif_stmt else_stmt
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    NEWLINE         shift and go to state 109
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! NEWLINE         [ reduce using rule 6 (empty -> .) ]
  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    expression                     shift and go to state 16
    statements                     shift and go to state 110
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 95

    (53) while_stmt -> WHILE expression COLON . NEWLINE statements

    NEWLINE         shift and go to state 111


state 96

    (54) for_stmt -> FOR ID IN . RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements

    RANGE           shift and go to state 112


state 97

    (19) function_def -> DEF ID LPAREN . parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> DEF ID LPAREN . RPAREN COLON NEWLINE statements
    (21) parameter_list -> . ID
    (22) parameter_list -> . ID COMMA parameter_list

    RPAREN          shift and go to state 115
    ID              shift and go to state 113

    parameter_list                 shift and go to state 114

state 98

    (35) input_multiple -> id_list EQUALS INPUT . LPAREN STRING RPAREN

    LPAREN          shift and go to state 116


state 99

    (29) print_stmt -> PRINT LPAREN print_arguments RPAREN .

    NEWLINE         reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    PRINT           reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    ID              reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    IF              reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    WHILE           reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    FOR             reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    DEF             reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    RETURN          reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    BREAK           reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    MINUS           reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    NOT             reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    LPAREN          reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    NUMBER          reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    FLOAT           reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    INT             reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    STRING          reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    TRUE            reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    FALSE           reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    $end            reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    ELIF            reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)
    ELSE            reduce using rule 29 (print_stmt -> PRINT LPAREN print_arguments RPAREN .)


state 100

    (31) print_arguments -> expression COMMA . print_arguments
    (30) print_arguments -> . expression
    (31) print_arguments -> . expression COMMA print_arguments
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 82
    print_arguments                shift and go to state 117

state 101

    (33) input_stmt -> ID EQUALS INPUT LPAREN . STRING RPAREN

    STRING          shift and go to state 118


state 102

    (38) list_stmt -> ID EQUALS LBRACKET list_elements . RBRACKET

    RBRACKET        shift and go to state 119


state 103

    (39) list_stmt -> ID EQUALS LBRACKET RBRACKET .

    NEWLINE         reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    PRINT           reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    ID              reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    IF              reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    WHILE           reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    FOR             reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    DEF             reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    RETURN          reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    BREAK           reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    MINUS           reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    NOT             reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    LPAREN          reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    NUMBER          reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    FLOAT           reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    INT             reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    STRING          reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    TRUE            reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    FALSE           reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    $end            reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    ELIF            reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)
    ELSE            reduce using rule 39 (list_stmt -> ID EQUALS LBRACKET RBRACKET .)


state 104

    (40) list_elements -> expression .
    (41) list_elements -> expression . COMMA list_elements
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    RBRACKET        reduce using rule 40 (list_elements -> expression .)
    COMMA           shift and go to state 120
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 105

    (23) function_call -> ID LPAREN argument_list RPAREN .

    NEWLINE         reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    PRINT           reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    ID              reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    IF              reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    WHILE           reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    FOR             reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    DEF             reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    RETURN          reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    BREAK           reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    MINUS           reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    NOT             reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    LPAREN          reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    NUMBER          reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    FLOAT           reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    INT             reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    STRING          reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    TRUE            reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    FALSE           reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    $end            reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    ELIF            reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)
    ELSE            reduce using rule 23 (function_call -> ID LPAREN argument_list RPAREN .)


state 106

    (26) argument_list -> expression COMMA . argument_list
    (25) argument_list -> . expression
    (26) argument_list -> . expression COMMA argument_list
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 89
    argument_list                  shift and go to state 121

state 107

    (42) expression -> ID LBRACKET expression RBRACKET .

    PLUS            reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    POWER           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    AND             reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    OR              reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    EQUAL_EQUAL     reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    NOT_EQUAL       reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    GREATER_EQUAL   reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    LESS_EQUAL      reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    NEWLINE         reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    PRINT           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    ID              reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    IF              reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    FOR             reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    DEF             reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    RETURN          reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    BREAK           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    NOT             reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    NUMBER          reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    INT             reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    STRING          reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    TRUE            reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    FALSE           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    $end            reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    ELIF            reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    ELSE            reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    COLON           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 42 (expression -> ID LBRACKET expression RBRACKET .)


state 108

    (43) expression -> ID DOT APPEND LPAREN . expression RPAREN
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 122

state 109

    (45) if_stmt -> IF expression COLON NEWLINE . statements elif_stmt else_stmt
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    expression                     shift and go to state 16
    statements                     shift and go to state 123
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 110

    (46) if_stmt -> IF expression COLON statements . elif_stmt else_stmt
    (47) elif_stmt -> . ELIF expression COLON NEWLINE statements elif_stmt
    (48) elif_stmt -> . ELIF expression COLON statements elif_stmt
    (49) elif_stmt -> . empty
    (6) empty -> .

  ! shift/reduce conflict for ELIF resolved as shift
    ELIF            shift and go to state 125
    $end            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    ID              reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    DEF             reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    BREAK           reduce using rule 6 (empty -> .)
    MINUS           reduce using rule 6 (empty -> .)
    NOT             reduce using rule 6 (empty -> .)
    LPAREN          reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    INT             reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    TRUE            reduce using rule 6 (empty -> .)
    FALSE           reduce using rule 6 (empty -> .)

  ! ELIF            [ reduce using rule 6 (empty -> .) ]

    elif_stmt                      shift and go to state 124
    empty                          shift and go to state 126

state 111

    (53) while_stmt -> WHILE expression COLON NEWLINE . statements
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    expression                     shift and go to state 16
    statements                     shift and go to state 127
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 112

    (54) for_stmt -> FOR ID IN RANGE . LPAREN expression COMMA expression RPAREN COLON NEWLINE statements

    LPAREN          shift and go to state 128


state 113

    (21) parameter_list -> ID .
    (22) parameter_list -> ID . COMMA parameter_list

    RPAREN          reduce using rule 21 (parameter_list -> ID .)
    COMMA           shift and go to state 129


state 114

    (19) function_def -> DEF ID LPAREN parameter_list . RPAREN COLON NEWLINE statements

    RPAREN          shift and go to state 130


state 115

    (20) function_def -> DEF ID LPAREN RPAREN . COLON NEWLINE statements

    COLON           shift and go to state 131


state 116

    (35) input_multiple -> id_list EQUALS INPUT LPAREN . STRING RPAREN

    STRING          shift and go to state 132


state 117

    (31) print_arguments -> expression COMMA print_arguments .

    RPAREN          reduce using rule 31 (print_arguments -> expression COMMA print_arguments .)


state 118

    (33) input_stmt -> ID EQUALS INPUT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 133


state 119

    (38) list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .

    NEWLINE         reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    PRINT           reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    ID              reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    IF              reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    WHILE           reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    FOR             reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    DEF             reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    RETURN          reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    BREAK           reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    MINUS           reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    NOT             reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    LPAREN          reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    NUMBER          reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    FLOAT           reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    INT             reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    STRING          reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    TRUE            reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    FALSE           reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    $end            reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    ELIF            reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)
    ELSE            reduce using rule 38 (list_stmt -> ID EQUALS LBRACKET list_elements RBRACKET .)


state 120

    (41) list_elements -> expression COMMA . list_elements
    (40) list_elements -> . expression
    (41) list_elements -> . expression COMMA list_elements
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 104
    list_elements                  shift and go to state 134

state 121

    (26) argument_list -> expression COMMA argument_list .

    RPAREN          reduce using rule 26 (argument_list -> expression COMMA argument_list .)


state 122

    (43) expression -> ID DOT APPEND LPAREN expression . RPAREN
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    RPAREN          shift and go to state 135
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 123

    (45) if_stmt -> IF expression COLON NEWLINE statements . elif_stmt else_stmt
    (47) elif_stmt -> . ELIF expression COLON NEWLINE statements elif_stmt
    (48) elif_stmt -> . ELIF expression COLON statements elif_stmt
    (49) elif_stmt -> . empty
    (6) empty -> .

  ! shift/reduce conflict for ELIF resolved as shift
    ELIF            shift and go to state 125
    $end            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    ID              reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    DEF             reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    BREAK           reduce using rule 6 (empty -> .)
    MINUS           reduce using rule 6 (empty -> .)
    NOT             reduce using rule 6 (empty -> .)
    LPAREN          reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    INT             reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    TRUE            reduce using rule 6 (empty -> .)
    FALSE           reduce using rule 6 (empty -> .)

  ! ELIF            [ reduce using rule 6 (empty -> .) ]

    elif_stmt                      shift and go to state 136
    empty                          shift and go to state 126

state 124

    (46) if_stmt -> IF expression COLON statements elif_stmt . else_stmt
    (50) else_stmt -> . ELSE COLON NEWLINE statements
    (51) else_stmt -> . ELSE COLON statements
    (52) else_stmt -> . empty
    (6) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 138
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    ID              reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    DEF             reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    BREAK           reduce using rule 6 (empty -> .)
    MINUS           reduce using rule 6 (empty -> .)
    NOT             reduce using rule 6 (empty -> .)
    LPAREN          reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    INT             reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    TRUE            reduce using rule 6 (empty -> .)
    FALSE           reduce using rule 6 (empty -> .)

  ! ELSE            [ reduce using rule 6 (empty -> .) ]

    else_stmt                      shift and go to state 137
    empty                          shift and go to state 139

state 125

    (47) elif_stmt -> ELIF . expression COLON NEWLINE statements elif_stmt
    (48) elif_stmt -> ELIF . expression COLON statements elif_stmt
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 140

state 126

    (49) elif_stmt -> empty .

    $end            reduce using rule 49 (elif_stmt -> empty .)
    ELIF            reduce using rule 49 (elif_stmt -> empty .)
    ELSE            reduce using rule 49 (elif_stmt -> empty .)
    NEWLINE         reduce using rule 49 (elif_stmt -> empty .)
    PRINT           reduce using rule 49 (elif_stmt -> empty .)
    ID              reduce using rule 49 (elif_stmt -> empty .)
    IF              reduce using rule 49 (elif_stmt -> empty .)
    WHILE           reduce using rule 49 (elif_stmt -> empty .)
    FOR             reduce using rule 49 (elif_stmt -> empty .)
    DEF             reduce using rule 49 (elif_stmt -> empty .)
    RETURN          reduce using rule 49 (elif_stmt -> empty .)
    BREAK           reduce using rule 49 (elif_stmt -> empty .)
    MINUS           reduce using rule 49 (elif_stmt -> empty .)
    NOT             reduce using rule 49 (elif_stmt -> empty .)
    LPAREN          reduce using rule 49 (elif_stmt -> empty .)
    NUMBER          reduce using rule 49 (elif_stmt -> empty .)
    FLOAT           reduce using rule 49 (elif_stmt -> empty .)
    INT             reduce using rule 49 (elif_stmt -> empty .)
    STRING          reduce using rule 49 (elif_stmt -> empty .)
    TRUE            reduce using rule 49 (elif_stmt -> empty .)
    FALSE           reduce using rule 49 (elif_stmt -> empty .)


state 127

    (53) while_stmt -> WHILE expression COLON NEWLINE statements .

    NEWLINE         reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    PRINT           reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    ID              reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    IF              reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    WHILE           reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    FOR             reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    DEF             reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    RETURN          reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    BREAK           reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    MINUS           reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    NOT             reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    LPAREN          reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    NUMBER          reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    FLOAT           reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    INT             reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    STRING          reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    TRUE            reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    FALSE           reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    $end            reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    ELIF            reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)
    ELSE            reduce using rule 53 (while_stmt -> WHILE expression COLON NEWLINE statements .)


state 128

    (54) for_stmt -> FOR ID IN RANGE LPAREN . expression COMMA expression RPAREN COLON NEWLINE statements
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 141

state 129

    (22) parameter_list -> ID COMMA . parameter_list
    (21) parameter_list -> . ID
    (22) parameter_list -> . ID COMMA parameter_list

    ID              shift and go to state 113

    parameter_list                 shift and go to state 142

state 130

    (19) function_def -> DEF ID LPAREN parameter_list RPAREN . COLON NEWLINE statements

    COLON           shift and go to state 143


state 131

    (20) function_def -> DEF ID LPAREN RPAREN COLON . NEWLINE statements

    NEWLINE         shift and go to state 144


state 132

    (35) input_multiple -> id_list EQUALS INPUT LPAREN STRING . RPAREN

    RPAREN          shift and go to state 145


state 133

    (33) input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .

    NEWLINE         reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    PRINT           reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    ID              reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    IF              reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    WHILE           reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    FOR             reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    DEF             reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    RETURN          reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    BREAK           reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    MINUS           reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    NOT             reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    LPAREN          reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    NUMBER          reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    FLOAT           reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    INT             reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    STRING          reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    TRUE            reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    FALSE           reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    $end            reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    ELIF            reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)
    ELSE            reduce using rule 33 (input_stmt -> ID EQUALS INPUT LPAREN STRING RPAREN .)


state 134

    (41) list_elements -> expression COMMA list_elements .

    RBRACKET        reduce using rule 41 (list_elements -> expression COMMA list_elements .)


state 135

    (43) expression -> ID DOT APPEND LPAREN expression RPAREN .

    PLUS            reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    MINUS           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    TIMES           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    POWER           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    AND             reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    OR              reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    EQUAL_EQUAL     reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    NOT_EQUAL       reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    GREATER         reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    GREATER_EQUAL   reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    LESS            reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    LESS_EQUAL      reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    PRINT           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    ID              reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    IF              reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    WHILE           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    FOR             reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    DEF             reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    RETURN          reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    BREAK           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    NOT             reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    LPAREN          reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    NUMBER          reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    FLOAT           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    INT             reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    STRING          reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    TRUE            reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    FALSE           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    $end            reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    ELIF            reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    ELSE            reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    RPAREN          reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    COLON           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    COMMA           reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 43 (expression -> ID DOT APPEND LPAREN expression RPAREN .)


state 136

    (45) if_stmt -> IF expression COLON NEWLINE statements elif_stmt . else_stmt
    (50) else_stmt -> . ELSE COLON NEWLINE statements
    (51) else_stmt -> . ELSE COLON statements
    (52) else_stmt -> . empty
    (6) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 138
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    ID              reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    DEF             reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    BREAK           reduce using rule 6 (empty -> .)
    MINUS           reduce using rule 6 (empty -> .)
    NOT             reduce using rule 6 (empty -> .)
    LPAREN          reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    INT             reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    TRUE            reduce using rule 6 (empty -> .)
    FALSE           reduce using rule 6 (empty -> .)

  ! ELSE            [ reduce using rule 6 (empty -> .) ]

    else_stmt                      shift and go to state 146
    empty                          shift and go to state 139

state 137

    (46) if_stmt -> IF expression COLON statements elif_stmt else_stmt .

    NEWLINE         reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    PRINT           reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    ID              reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    IF              reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    WHILE           reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    FOR             reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    DEF             reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    RETURN          reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    BREAK           reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    MINUS           reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    NOT             reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    LPAREN          reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    NUMBER          reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    FLOAT           reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    INT             reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    STRING          reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    TRUE            reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    FALSE           reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    $end            reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    ELIF            reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)
    ELSE            reduce using rule 46 (if_stmt -> IF expression COLON statements elif_stmt else_stmt .)


state 138

    (50) else_stmt -> ELSE . COLON NEWLINE statements
    (51) else_stmt -> ELSE . COLON statements

    COLON           shift and go to state 147


state 139

    (52) else_stmt -> empty .

    $end            reduce using rule 52 (else_stmt -> empty .)
    ELIF            reduce using rule 52 (else_stmt -> empty .)
    ELSE            reduce using rule 52 (else_stmt -> empty .)
    NEWLINE         reduce using rule 52 (else_stmt -> empty .)
    PRINT           reduce using rule 52 (else_stmt -> empty .)
    ID              reduce using rule 52 (else_stmt -> empty .)
    IF              reduce using rule 52 (else_stmt -> empty .)
    WHILE           reduce using rule 52 (else_stmt -> empty .)
    FOR             reduce using rule 52 (else_stmt -> empty .)
    DEF             reduce using rule 52 (else_stmt -> empty .)
    RETURN          reduce using rule 52 (else_stmt -> empty .)
    BREAK           reduce using rule 52 (else_stmt -> empty .)
    MINUS           reduce using rule 52 (else_stmt -> empty .)
    NOT             reduce using rule 52 (else_stmt -> empty .)
    LPAREN          reduce using rule 52 (else_stmt -> empty .)
    NUMBER          reduce using rule 52 (else_stmt -> empty .)
    FLOAT           reduce using rule 52 (else_stmt -> empty .)
    INT             reduce using rule 52 (else_stmt -> empty .)
    STRING          reduce using rule 52 (else_stmt -> empty .)
    TRUE            reduce using rule 52 (else_stmt -> empty .)
    FALSE           reduce using rule 52 (else_stmt -> empty .)


state 140

    (47) elif_stmt -> ELIF expression . COLON NEWLINE statements elif_stmt
    (48) elif_stmt -> ELIF expression . COLON statements elif_stmt
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    COLON           shift and go to state 148
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 141

    (54) for_stmt -> FOR ID IN RANGE LPAREN expression . COMMA expression RPAREN COLON NEWLINE statements
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    COMMA           shift and go to state 149
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 142

    (22) parameter_list -> ID COMMA parameter_list .

    RPAREN          reduce using rule 22 (parameter_list -> ID COMMA parameter_list .)


state 143

    (19) function_def -> DEF ID LPAREN parameter_list RPAREN COLON . NEWLINE statements

    NEWLINE         shift and go to state 150


state 144

    (20) function_def -> DEF ID LPAREN RPAREN COLON NEWLINE . statements
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    statements                     shift and go to state 151
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    expression                     shift and go to state 16
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 145

    (35) input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .

    NEWLINE         reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    PRINT           reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    ID              reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    IF              reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    WHILE           reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    FOR             reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    DEF             reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    RETURN          reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    BREAK           reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    MINUS           reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    NOT             reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    LPAREN          reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    NUMBER          reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    FLOAT           reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    INT             reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    STRING          reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    TRUE            reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    FALSE           reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    $end            reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    ELIF            reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)
    ELSE            reduce using rule 35 (input_multiple -> id_list EQUALS INPUT LPAREN STRING RPAREN .)


state 146

    (45) if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .

    NEWLINE         reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    PRINT           reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    ID              reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    IF              reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    WHILE           reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    FOR             reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    DEF             reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    RETURN          reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    BREAK           reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    MINUS           reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    NOT             reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    LPAREN          reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    NUMBER          reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    FLOAT           reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    INT             reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    STRING          reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    TRUE            reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    FALSE           reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    $end            reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    ELIF            reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)
    ELSE            reduce using rule 45 (if_stmt -> IF expression COLON NEWLINE statements elif_stmt else_stmt .)


state 147

    (50) else_stmt -> ELSE COLON . NEWLINE statements
    (51) else_stmt -> ELSE COLON . statements
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    NEWLINE         shift and go to state 152
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! NEWLINE         [ reduce using rule 6 (empty -> .) ]
  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    statements                     shift and go to state 153
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    expression                     shift and go to state 16
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 148

    (47) elif_stmt -> ELIF expression COLON . NEWLINE statements elif_stmt
    (48) elif_stmt -> ELIF expression COLON . statements elif_stmt
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    NEWLINE         shift and go to state 154
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! NEWLINE         [ reduce using rule 6 (empty -> .) ]
  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    expression                     shift and go to state 16
    statements                     shift and go to state 155
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 149

    (54) for_stmt -> FOR ID IN RANGE LPAREN expression COMMA . expression RPAREN COLON NEWLINE statements
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID

    ID              shift and go to state 53
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

    expression                     shift and go to state 156

state 150

    (19) function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE . statements
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    statements                     shift and go to state 157
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    expression                     shift and go to state 16
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 151

    (20) function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .

    NEWLINE         reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    PRINT           reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    ID              reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    IF              reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    WHILE           reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    FOR             reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    DEF             reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    RETURN          reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    BREAK           reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    MINUS           reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    NOT             reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    LPAREN          reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    NUMBER          reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    FLOAT           reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    INT             reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    STRING          reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    TRUE            reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    FALSE           reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    $end            reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    ELIF            reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)
    ELSE            reduce using rule 20 (function_def -> DEF ID LPAREN RPAREN COLON NEWLINE statements .)


state 152

    (50) else_stmt -> ELSE COLON NEWLINE . statements
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    statements                     shift and go to state 158
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    expression                     shift and go to state 16
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 153

    (51) else_stmt -> ELSE COLON statements .

    $end            reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    ELIF            reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    ELSE            reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    NEWLINE         reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    PRINT           reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    ID              reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    IF              reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    WHILE           reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    FOR             reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    DEF             reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    RETURN          reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    BREAK           reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    MINUS           reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    NOT             reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    LPAREN          reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    NUMBER          reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    FLOAT           reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    INT             reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    STRING          reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    TRUE            reduce using rule 51 (else_stmt -> ELSE COLON statements .)
    FALSE           reduce using rule 51 (else_stmt -> ELSE COLON statements .)


state 154

    (47) elif_stmt -> ELIF expression COLON NEWLINE . statements elif_stmt
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    expression                     shift and go to state 16
    statements                     shift and go to state 159
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 155

    (48) elif_stmt -> ELIF expression COLON statements . elif_stmt
    (47) elif_stmt -> . ELIF expression COLON NEWLINE statements elif_stmt
    (48) elif_stmt -> . ELIF expression COLON statements elif_stmt
    (49) elif_stmt -> . empty
    (6) empty -> .

  ! shift/reduce conflict for ELIF resolved as shift
    ELIF            shift and go to state 125
    $end            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    ID              reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    DEF             reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    BREAK           reduce using rule 6 (empty -> .)
    MINUS           reduce using rule 6 (empty -> .)
    NOT             reduce using rule 6 (empty -> .)
    LPAREN          reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    INT             reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    TRUE            reduce using rule 6 (empty -> .)
    FALSE           reduce using rule 6 (empty -> .)

  ! ELIF            [ reduce using rule 6 (empty -> .) ]

    elif_stmt                      shift and go to state 160
    empty                          shift and go to state 126

state 156

    (54) for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression . RPAREN COLON NEWLINE statements
    (55) expression -> expression . PLUS expression
    (56) expression -> expression . MINUS expression
    (57) expression -> expression . TIMES expression
    (58) expression -> expression . DIVIDE expression
    (59) expression -> expression . POWER expression
    (60) expression -> expression . AND expression
    (61) expression -> expression . OR expression
    (62) expression -> expression . EQUAL_EQUAL expression
    (63) expression -> expression . NOT_EQUAL expression
    (64) expression -> expression . GREATER expression
    (65) expression -> expression . GREATER_EQUAL expression
    (66) expression -> expression . LESS expression
    (67) expression -> expression . LESS_EQUAL expression

    RPAREN          shift and go to state 161
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    POWER           shift and go to state 42
    AND             shift and go to state 43
    OR              shift and go to state 44
    EQUAL_EQUAL     shift and go to state 45
    NOT_EQUAL       shift and go to state 46
    GREATER         shift and go to state 47
    GREATER_EQUAL   shift and go to state 48
    LESS            shift and go to state 49
    LESS_EQUAL      shift and go to state 50


state 157

    (19) function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .

    NEWLINE         reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    PRINT           reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    ID              reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    IF              reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    WHILE           reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    FOR             reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    DEF             reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    RETURN          reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    BREAK           reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    MINUS           reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    NOT             reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    LPAREN          reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    NUMBER          reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    FLOAT           reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    INT             reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    STRING          reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    TRUE            reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    FALSE           reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    $end            reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    ELIF            reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)
    ELSE            reduce using rule 19 (function_def -> DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements .)


state 158

    (50) else_stmt -> ELSE COLON NEWLINE statements .

    $end            reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    ELIF            reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    ELSE            reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    NEWLINE         reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    PRINT           reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    ID              reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    IF              reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    WHILE           reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    FOR             reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    DEF             reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    RETURN          reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    BREAK           reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    MINUS           reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    NOT             reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    LPAREN          reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    NUMBER          reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    FLOAT           reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    INT             reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    STRING          reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    TRUE            reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)
    FALSE           reduce using rule 50 (else_stmt -> ELSE COLON NEWLINE statements .)


state 159

    (47) elif_stmt -> ELIF expression COLON NEWLINE statements . elif_stmt
    (47) elif_stmt -> . ELIF expression COLON NEWLINE statements elif_stmt
    (48) elif_stmt -> . ELIF expression COLON statements elif_stmt
    (49) elif_stmt -> . empty
    (6) empty -> .

  ! shift/reduce conflict for ELIF resolved as shift
    ELIF            shift and go to state 125
    $end            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           reduce using rule 6 (empty -> .)
    ID              reduce using rule 6 (empty -> .)
    IF              reduce using rule 6 (empty -> .)
    WHILE           reduce using rule 6 (empty -> .)
    FOR             reduce using rule 6 (empty -> .)
    DEF             reduce using rule 6 (empty -> .)
    RETURN          reduce using rule 6 (empty -> .)
    BREAK           reduce using rule 6 (empty -> .)
    MINUS           reduce using rule 6 (empty -> .)
    NOT             reduce using rule 6 (empty -> .)
    LPAREN          reduce using rule 6 (empty -> .)
    NUMBER          reduce using rule 6 (empty -> .)
    FLOAT           reduce using rule 6 (empty -> .)
    INT             reduce using rule 6 (empty -> .)
    STRING          reduce using rule 6 (empty -> .)
    TRUE            reduce using rule 6 (empty -> .)
    FALSE           reduce using rule 6 (empty -> .)

  ! ELIF            [ reduce using rule 6 (empty -> .) ]

    elif_stmt                      shift and go to state 162
    empty                          shift and go to state 126

state 160

    (48) elif_stmt -> ELIF expression COLON statements elif_stmt .

    $end            reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    ELIF            reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    ELSE            reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    NEWLINE         reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    PRINT           reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    ID              reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    IF              reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    WHILE           reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    FOR             reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    DEF             reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    RETURN          reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    BREAK           reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    MINUS           reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    NOT             reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    LPAREN          reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    NUMBER          reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    FLOAT           reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    INT             reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    STRING          reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    TRUE            reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)
    FALSE           reduce using rule 48 (elif_stmt -> ELIF expression COLON statements elif_stmt .)


state 161

    (54) for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN . COLON NEWLINE statements

    COLON           shift and go to state 163


state 162

    (47) elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .

    $end            reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    ELIF            reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    ELSE            reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    NEWLINE         reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    PRINT           reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    ID              reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    IF              reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    WHILE           reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    FOR             reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    DEF             reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    RETURN          reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    BREAK           reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    MINUS           reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    NOT             reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    LPAREN          reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    NUMBER          reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    FLOAT           reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    INT             reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    STRING          reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    TRUE            reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)
    FALSE           reduce using rule 47 (elif_stmt -> ELIF expression COLON NEWLINE statements elif_stmt .)


state 163

    (54) for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON . NEWLINE statements

    NEWLINE         shift and go to state 164


state 164

    (54) for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE . statements
    (2) statements -> . statement NEWLINE statements
    (3) statements -> . statement statements
    (4) statements -> . statement
    (5) statements -> . empty
    (7) statement -> . print_stmt
    (8) statement -> . assignment_stmt
    (9) statement -> . input_stmt
    (10) statement -> . if_stmt
    (11) statement -> . while_stmt
    (12) statement -> . for_stmt
    (13) statement -> . list_stmt
    (14) statement -> . function_def
    (15) statement -> . function_call
    (16) statement -> . return_stmt
    (17) statement -> . break_stmt
    (18) statement -> . expression
    (6) empty -> .
    (29) print_stmt -> . PRINT LPAREN print_arguments RPAREN
    (32) assignment_stmt -> . ID EQUALS expression
    (33) input_stmt -> . ID EQUALS INPUT LPAREN STRING RPAREN
    (34) input_stmt -> . input_multiple
    (45) if_stmt -> . IF expression COLON NEWLINE statements elif_stmt else_stmt
    (46) if_stmt -> . IF expression COLON statements elif_stmt else_stmt
    (53) while_stmt -> . WHILE expression COLON NEWLINE statements
    (54) for_stmt -> . FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements
    (38) list_stmt -> . ID EQUALS LBRACKET list_elements RBRACKET
    (39) list_stmt -> . ID EQUALS LBRACKET RBRACKET
    (19) function_def -> . DEF ID LPAREN parameter_list RPAREN COLON NEWLINE statements
    (20) function_def -> . DEF ID LPAREN RPAREN COLON NEWLINE statements
    (23) function_call -> . ID LPAREN argument_list RPAREN
    (24) function_call -> . ID LPAREN RPAREN
    (27) return_stmt -> . RETURN expression
    (28) return_stmt -> . RETURN
    (44) break_stmt -> . BREAK
    (42) expression -> . ID LBRACKET expression RBRACKET
    (43) expression -> . ID DOT APPEND LPAREN expression RPAREN
    (55) expression -> . expression PLUS expression
    (56) expression -> . expression MINUS expression
    (57) expression -> . expression TIMES expression
    (58) expression -> . expression DIVIDE expression
    (59) expression -> . expression POWER expression
    (60) expression -> . expression AND expression
    (61) expression -> . expression OR expression
    (62) expression -> . expression EQUAL_EQUAL expression
    (63) expression -> . expression NOT_EQUAL expression
    (64) expression -> . expression GREATER expression
    (65) expression -> . expression GREATER_EQUAL expression
    (66) expression -> . expression LESS expression
    (67) expression -> . expression LESS_EQUAL expression
    (68) expression -> . MINUS expression
    (69) expression -> . NOT expression
    (70) expression -> . LPAREN expression RPAREN
    (71) expression -> . NUMBER
    (72) expression -> . FLOAT
    (73) expression -> . INT
    (74) expression -> . STRING
    (75) expression -> . TRUE
    (76) expression -> . FALSE
    (77) expression -> . ID
    (35) input_multiple -> . id_list EQUALS INPUT LPAREN STRING RPAREN
    (36) id_list -> . ID COMMA ID
    (37) id_list -> . ID COMMA id_list

  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for NOT resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    $end            reduce using rule 6 (empty -> .)
    ELIF            reduce using rule 6 (empty -> .)
    ELSE            reduce using rule 6 (empty -> .)
    NEWLINE         reduce using rule 6 (empty -> .)
    PRINT           shift and go to state 17
    ID              shift and go to state 19
    IF              shift and go to state 22
    WHILE           shift and go to state 23
    FOR             shift and go to state 24
    DEF             shift and go to state 25
    RETURN          shift and go to state 26
    BREAK           shift and go to state 27
    MINUS           shift and go to state 28
    NOT             shift and go to state 29
    LPAREN          shift and go to state 18
    NUMBER          shift and go to state 30
    FLOAT           shift and go to state 31
    INT             shift and go to state 32
    STRING          shift and go to state 20
    TRUE            shift and go to state 33
    FALSE           shift and go to state 34

  ! PRINT           [ reduce using rule 6 (empty -> .) ]
  ! ID              [ reduce using rule 6 (empty -> .) ]
  ! IF              [ reduce using rule 6 (empty -> .) ]
  ! WHILE           [ reduce using rule 6 (empty -> .) ]
  ! FOR             [ reduce using rule 6 (empty -> .) ]
  ! DEF             [ reduce using rule 6 (empty -> .) ]
  ! RETURN          [ reduce using rule 6 (empty -> .) ]
  ! BREAK           [ reduce using rule 6 (empty -> .) ]
  ! MINUS           [ reduce using rule 6 (empty -> .) ]
  ! NOT             [ reduce using rule 6 (empty -> .) ]
  ! LPAREN          [ reduce using rule 6 (empty -> .) ]
  ! NUMBER          [ reduce using rule 6 (empty -> .) ]
  ! FLOAT           [ reduce using rule 6 (empty -> .) ]
  ! INT             [ reduce using rule 6 (empty -> .) ]
  ! STRING          [ reduce using rule 6 (empty -> .) ]
  ! TRUE            [ reduce using rule 6 (empty -> .) ]
  ! FALSE           [ reduce using rule 6 (empty -> .) ]

    expression                     shift and go to state 16
    statements                     shift and go to state 165
    statement                      shift and go to state 3
    empty                          shift and go to state 4
    print_stmt                     shift and go to state 5
    assignment_stmt                shift and go to state 6
    input_stmt                     shift and go to state 7
    if_stmt                        shift and go to state 8
    while_stmt                     shift and go to state 9
    for_stmt                       shift and go to state 10
    list_stmt                      shift and go to state 11
    function_def                   shift and go to state 12
    function_call                  shift and go to state 13
    return_stmt                    shift and go to state 14
    break_stmt                     shift and go to state 15
    input_multiple                 shift and go to state 21
    id_list                        shift and go to state 35

state 165

    (54) for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .

    NEWLINE         reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    PRINT           reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    ID              reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    IF              reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    WHILE           reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    FOR             reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    DEF             reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    RETURN          reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    BREAK           reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    MINUS           reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    NOT             reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    LPAREN          reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    NUMBER          reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    FLOAT           reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    INT             reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    STRING          reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    TRUE            reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    FALSE           reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    $end            reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    ELIF            reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)
    ELSE            reduce using rule 54 (for_stmt -> FOR ID IN RANGE LPAREN expression COMMA expression RPAREN COLON NEWLINE statements .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 3 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 3 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 3 resolved as shift
WARNING: shift/reduce conflict for ID in state 3 resolved as shift
WARNING: shift/reduce conflict for IF in state 3 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 3 resolved as shift
WARNING: shift/reduce conflict for FOR in state 3 resolved as shift
WARNING: shift/reduce conflict for DEF in state 3 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 3 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 3 resolved as shift
WARNING: shift/reduce conflict for NOT in state 3 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 3 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 3 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 3 resolved as shift
WARNING: shift/reduce conflict for INT in state 3 resolved as shift
WARNING: shift/reduce conflict for STRING in state 3 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 3 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 3 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 16 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 19 resolved as shift
WARNING: shift/reduce conflict for ID in state 26 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 26 resolved as shift
WARNING: shift/reduce conflict for NOT in state 26 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 26 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 26 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 26 resolved as shift
WARNING: shift/reduce conflict for INT in state 26 resolved as shift
WARNING: shift/reduce conflict for STRING in state 26 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 26 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 26 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 36 resolved as shift
WARNING: shift/reduce conflict for ID in state 36 resolved as shift
WARNING: shift/reduce conflict for IF in state 36 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 36 resolved as shift
WARNING: shift/reduce conflict for FOR in state 36 resolved as shift
WARNING: shift/reduce conflict for DEF in state 36 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 36 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 36 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 36 resolved as shift
WARNING: shift/reduce conflict for NOT in state 36 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 36 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 36 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 36 resolved as shift
WARNING: shift/reduce conflict for INT in state 36 resolved as shift
WARNING: shift/reduce conflict for STRING in state 36 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 36 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 36 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 65 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 65 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 65 resolved as shift
WARNING: shift/reduce conflict for POWER in state 65 resolved as shift
WARNING: shift/reduce conflict for AND in state 65 resolved as shift
WARNING: shift/reduce conflict for OR in state 65 resolved as shift
WARNING: shift/reduce conflict for EQUAL_EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for NOT_EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATER in state 65 resolved as shift
WARNING: shift/reduce conflict for GREATER_EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for LESS in state 65 resolved as shift
WARNING: shift/reduce conflict for LESS_EQUAL in state 65 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 84 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 94 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for IF in state 94 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 94 resolved as shift
WARNING: shift/reduce conflict for FOR in state 94 resolved as shift
WARNING: shift/reduce conflict for DEF in state 94 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 94 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for NOT in state 94 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 94 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 94 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 94 resolved as shift
WARNING: shift/reduce conflict for INT in state 94 resolved as shift
WARNING: shift/reduce conflict for STRING in state 94 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 94 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 94 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 109 resolved as shift
WARNING: shift/reduce conflict for ID in state 109 resolved as shift
WARNING: shift/reduce conflict for IF in state 109 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 109 resolved as shift
WARNING: shift/reduce conflict for FOR in state 109 resolved as shift
WARNING: shift/reduce conflict for DEF in state 109 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 109 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 109 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 109 resolved as shift
WARNING: shift/reduce conflict for NOT in state 109 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 109 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 109 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 109 resolved as shift
WARNING: shift/reduce conflict for INT in state 109 resolved as shift
WARNING: shift/reduce conflict for STRING in state 109 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 109 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 109 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 110 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 111 resolved as shift
WARNING: shift/reduce conflict for ID in state 111 resolved as shift
WARNING: shift/reduce conflict for IF in state 111 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 111 resolved as shift
WARNING: shift/reduce conflict for FOR in state 111 resolved as shift
WARNING: shift/reduce conflict for DEF in state 111 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 111 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 111 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 111 resolved as shift
WARNING: shift/reduce conflict for NOT in state 111 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 111 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 111 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 111 resolved as shift
WARNING: shift/reduce conflict for INT in state 111 resolved as shift
WARNING: shift/reduce conflict for STRING in state 111 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 111 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 111 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 123 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 124 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 136 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 144 resolved as shift
WARNING: shift/reduce conflict for ID in state 144 resolved as shift
WARNING: shift/reduce conflict for IF in state 144 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 144 resolved as shift
WARNING: shift/reduce conflict for FOR in state 144 resolved as shift
WARNING: shift/reduce conflict for DEF in state 144 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 144 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 144 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 144 resolved as shift
WARNING: shift/reduce conflict for NOT in state 144 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 144 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 144 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 144 resolved as shift
WARNING: shift/reduce conflict for INT in state 144 resolved as shift
WARNING: shift/reduce conflict for STRING in state 144 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 144 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 144 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 147 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 147 resolved as shift
WARNING: shift/reduce conflict for ID in state 147 resolved as shift
WARNING: shift/reduce conflict for IF in state 147 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 147 resolved as shift
WARNING: shift/reduce conflict for FOR in state 147 resolved as shift
WARNING: shift/reduce conflict for DEF in state 147 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 147 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 147 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 147 resolved as shift
WARNING: shift/reduce conflict for NOT in state 147 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 147 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 147 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 147 resolved as shift
WARNING: shift/reduce conflict for INT in state 147 resolved as shift
WARNING: shift/reduce conflict for STRING in state 147 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 147 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 147 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 148 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 148 resolved as shift
WARNING: shift/reduce conflict for ID in state 148 resolved as shift
WARNING: shift/reduce conflict for IF in state 148 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 148 resolved as shift
WARNING: shift/reduce conflict for FOR in state 148 resolved as shift
WARNING: shift/reduce conflict for DEF in state 148 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 148 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 148 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 148 resolved as shift
WARNING: shift/reduce conflict for NOT in state 148 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 148 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 148 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 148 resolved as shift
WARNING: shift/reduce conflict for INT in state 148 resolved as shift
WARNING: shift/reduce conflict for STRING in state 148 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 148 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 148 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 150 resolved as shift
WARNING: shift/reduce conflict for ID in state 150 resolved as shift
WARNING: shift/reduce conflict for IF in state 150 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 150 resolved as shift
WARNING: shift/reduce conflict for FOR in state 150 resolved as shift
WARNING: shift/reduce conflict for DEF in state 150 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 150 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 150 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 150 resolved as shift
WARNING: shift/reduce conflict for NOT in state 150 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 150 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 150 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 150 resolved as shift
WARNING: shift/reduce conflict for INT in state 150 resolved as shift
WARNING: shift/reduce conflict for STRING in state 150 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 150 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 150 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 152 resolved as shift
WARNING: shift/reduce conflict for ID in state 152 resolved as shift
WARNING: shift/reduce conflict for IF in state 152 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 152 resolved as shift
WARNING: shift/reduce conflict for FOR in state 152 resolved as shift
WARNING: shift/reduce conflict for DEF in state 152 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 152 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 152 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 152 resolved as shift
WARNING: shift/reduce conflict for NOT in state 152 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 152 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 152 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 152 resolved as shift
WARNING: shift/reduce conflict for INT in state 152 resolved as shift
WARNING: shift/reduce conflict for STRING in state 152 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 152 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 152 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 154 resolved as shift
WARNING: shift/reduce conflict for ID in state 154 resolved as shift
WARNING: shift/reduce conflict for IF in state 154 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 154 resolved as shift
WARNING: shift/reduce conflict for FOR in state 154 resolved as shift
WARNING: shift/reduce conflict for DEF in state 154 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 154 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 154 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 154 resolved as shift
WARNING: shift/reduce conflict for NOT in state 154 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 154 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 154 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 154 resolved as shift
WARNING: shift/reduce conflict for INT in state 154 resolved as shift
WARNING: shift/reduce conflict for STRING in state 154 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 154 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 154 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 155 resolved as shift
WARNING: shift/reduce conflict for ELIF in state 159 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for FOR in state 164 resolved as shift
WARNING: shift/reduce conflict for DEF in state 164 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 164 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for NOT in state 164 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 164 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 164 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 164 resolved as shift
WARNING: shift/reduce conflict for INT in state 164 resolved as shift
WARNING: shift/reduce conflict for STRING in state 164 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 164 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 164 resolved as shift
WARNING: reduce/reduce conflict in state 3 resolved using rule (statements -> statement)
WARNING: rejected rule (empty -> <empty>) in state 3
